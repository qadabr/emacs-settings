;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [99 107])
            ("RKNETLIB_TCPIP" variable (:constant-flag t) nil [116 130])
            ("RKNETLIB_TCPIP_TCP_IN" variable (:constant-flag t) nil [139 160])
            ("rtlib/rtlib.h" include (:system-flag t) nil [162 186])
            ("rknet/rknetlib.h" include (:system-flag t) nil [187 214])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [215 245])
            ("g_inseg" variable
               (:typemodifiers ("static")
                :type ("TcpSeg" type (:type "class") nil nil))
                nil [411 434])
            ("g_tcpHdr" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("TcpHdr" type (:type "class") nil nil))
                nil [435 466])
            ("g_ipHdr" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("IpHdr" type (:type "class") nil nil))
                nil [467 497])
            ("g_seqno" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("uint32" type (:type "class") nil nil))
                nil [498 525])
            ("g_ackno" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("uint32" type (:type "class") nil nil))
                nil [526 553])
            ("g_flags" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("uint8" type (:type "class") nil nil))
                nil [554 581])
            ("g_tcpLen" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("uint16" type (:type "class") nil nil))
                nil [582 610])
            ("g_recvFalgs" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("uint8" type (:type "class") nil nil))
                nil [611 642])
            ("g_recvData" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("Pbuf" type (:type "class") nil nil))
                nil [643 676])
            ("g_dstAddr" variable
               (:typemodifiers ("static")
                :type ("IpAddr" type (:type "class") nil nil))
                nil [677 702])
            ("g_srcAddr" variable
               (:typemodifiers ("static")
                :type ("IpAddr" type (:type "class") nil nil))
                nil [703 728])
            ("g_tcpInputPcb" variable
               (:pointer 1
                :default-value "NULL"
                :type ("TcpPcb" type (:type "class") nil nil))
                nil [730 759])
            ("TcpParseOpt" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [785 797]))                  
                :type "void")
                nil [761 1714])
            ("TcpTimewaitInput" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1746 1758]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [1716 2415])
            ("TcpListenInput" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcbListen" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2445 2463]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [2417 3651])
            ("TcpOosInsertSegment" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("cseg" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3685 3698])
                    ("next" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3699 3712]))                  
                :type "void")
                nil [3653 4349])
            ("TcpReceive" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4375 4387]))                  
                :type "void")
                nil [4351 17127])
            ("TcpProcess" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17153 17165]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [17129 23215])
            ("TcpInput" function
               (:arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [23231 23239])
                    ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [23240 23254]))                  
                :type "void")
                nil [23217 30077]))          
      :file "tcp_in.c"
      :pointmax 30078
      :fsize 33475
      :lastmodtime '(22665 62191 136739 203000)
      :unmatched-syntax nil
      :lexical-table 
        '(("RKNETLIB_TCPIP")
          ("RKNETLIB")
          ("RKNETLIB_TCPIP_TCP_IN")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [58 66])
            ("RKNETLIB_TPCIP" variable (:constant-flag t) nil [75 89])
            ("RKNETLIB_TCPIP_PBUF" variable (:constant-flag t) nil [98 117])
            ("rtlib/rtlib.h" include (:system-flag t) nil [119 143])
            ("rknet/rknetlib.h" include (:system-flag t) nil [144 171])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [172 202])
            ("PbufCreate" function
               (:pointer 1
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [221 235])
                    ("layer" variable (:type ("PbufLayer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [236 252])
                    ("len" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [253 264]))                  
                :type ("Pbuf" type (:type "class") nil nil))
                nil [204 1222])
            ("PbufRealloc" function
               (:arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1241 1249])
                    ("newLen" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1250 1264]))                  
                :type "void")
                nil [1224 1707])
            ("PbufDeref" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1726 1737]))                  
                :type ("uint32" type (:type "class") nil nil))
                nil [1709 2232])
            ("PbufRef" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2247 2258]))                  
                :type "void")
                nil [2234 2291])
            ("PbufCount" function
               (:arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2309 2317]))                  
                :type ("uint8" type (:type "class") nil nil))
                nil [2293 2400])
            ("PbufCat" function
               (:arguments 
                  ( ("head" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2415 2426])
                    ("tail" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2427 2438]))                  
                :type "void")
                nil [2402 2893])
            ("PbufChain" function
               (:arguments 
                  ( ("head" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2910 2921])
                    ("tail" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2922 2933]))                  
                :type "void")
                nil [2895 2975])
            ("PbufHeader" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2994 3005])
                    ("headerSize" variable (:type ("int16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3006 3023]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [2977 4154])
            ("PbufCopy" function
               (:arguments 
                  ( ("dst" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4171 4181])
                    ("src" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4182 4192]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [4156 5321])
            ("PbufCopyPartial" function
               (:arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5346 5354])
                    ("dataPtr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [5355 5369])
                    ("len" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5370 5381])
                    ("off" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5382 5393]))                  
                :type ("uint16" type (:type "class") nil nil))
                nil [5323 6043]))          
      :file "pbuf.c"
      :pointmax 6044
      :fsize 6632
      :lastmodtime '(22665 61169 725559 372000)
      :unmatched-syntax nil
      :lexical-table 
        '(("RKNETLIB_TPCIP")
          ("RKNETLIB")
          ("RKNETLIB_TCPIP_PBUF")
          )
)

    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [84 92])
            ("RKNETLIB_TCPIP" variable (:constant-flag t) nil [101 115])
            ("RKNETLIB_TCPIP_TCP_OUT" variable (:constant-flag t) nil [124 146])
            ("rtlib/rtlib.h" include (:system-flag t) nil [148 172])
            ("rknet/rknetlib.h" include (:system-flag t) nil [173 200])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [201 231])
            ("TcpOutputAllocHeader" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [356 368])
                    ("optLen" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [396 411])
                    ("dataLen" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [439 455])
                    ("seqno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [483 497]))                  
                :type ("Pbuf" type (:type "class") nil nil))
                nil [322 1022])
            ("TcpOutputSegment" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("seg" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1053 1065])
                    ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1066 1078]))                  
                :type "void")
                nil [1024 2532])
            ("TcpSegmentFree" function
               (:arguments 
                  ( ("seg" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2554 2566]))                  
                :type "void")
                nil [2534 2702])
            ("TcpSegmentsFree" function
               (:arguments 
                  ( ("seg" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2725 2737]))                  
                :type "void")
                nil [2704 2857])
            ("TcpSegmentCreate" function
               (:pointer 1
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2886 2898])
                    ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2900 2910])
                    ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2912 2926])
                    ("seqno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2928 2942])
                    ("optFlags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2944 2961]))                  
                :type ("TcpSeg" type (:type "class") nil nil))
                nil [2859 3639])
            ("TcpEnqueueFlags" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3663 3675])
                    ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3676 3688]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [3641 5254])
            ("TcpKeepalive" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5274 5286]))                  
                :type "void")
                nil [5256 5914])
            ("TcpSendFin" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5933 5945]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [5916 6421])
            ("TcpSendEmptyAck" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6445 6457]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [6423 7080])
            ("TcpRst" function
               (:arguments 
                  ( ("seqno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7096 7110])
                    ("ackno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7112 7126])
                    ("localIp" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7128 7144])
                    ("remoteIp" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7146 7163])
                    ("localPort" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7165 7183])
                    ("remotePort" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7185 7204]))                  
                :type "void")
                nil [7082 8120])
            ("TcpZeroWindowProbe" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8146 8158]))                  
                :type "void")
                nil [8122 9265])
            ("TcpRexmitRto" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9285 9297]))                  
                :type "void")
                nil [9267 9638])
            ("TcpRexmitFast" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9659 9671]))                  
                :type "void")
                nil [9640 10258])
            ("TcpRexmit" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10275 10287]))                  
                :type "void")
                nil [10260 10742])
            ("TcpOutput" function
               (:arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10760 10772]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [10744 13344]))          
      :file "tcp_out.c"
      :pointmax 13345
      :fsize 13954
      :lastmodtime '(22665 59165 499693 428000)
      :unmatched-syntax nil
      :lexical-table 
        '(("RKNETLIB_TCPIP")
          ("RKNETLIB_TCPIP_TCP_OUT")
          ("RKNETLIB")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [69 77])
            ("RKNETLIB_TCPIP" variable (:constant-flag t) nil [86 100])
            ("RKNETLIB_TCPIP_IPV4" variable (:constant-flag t) nil [109 128])
            ("rtlib/rtlib.h" include (:system-flag t) nil [130 154])
            ("rknet/rknetlib.h" include (:system-flag t) nil [155 182])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [183 213])
            ("IP_HLEN" variable (:constant-flag t) nil [223 230])
            ("IpHeaderDump" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [260 271]))                  
                :type "void")
                nil [235 1692])
            ("IpInput" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1708 1719])
                    ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1720 1734]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [1694 3607])
            ("IpRoute" function
               (:pointer 1
                :arguments 
                  ( ("dstAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3627 3643]))                  
                :type ("RknetDev" type (:type "class") nil nil))
                nil [3609 3681])
            ("IpDevOutput" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3703 3718])
                    ("src" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3720 3734])
                    ("dst" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3736 3750])
                    ("ttl" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3752 3766])
                    ("tos" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3768 3782])
                    ("proto" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3784 3800])
                    ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3802 3816]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [3683 4946])
            ("IpOutput" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4965 4978])
                    ("src" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4980 4992])
                    ("dst" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4994 5006])
                    ("ttl" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5008 5020])
                    ("tos" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5022 5034])
                    ("proto" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5036 5050]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [4948 5207]))          
      :file "ip4.c"
      :pointmax 5208
      :fsize 5640
      :lastmodtime '(22666 1855 951945 637000)
      :unmatched-syntax nil
      :lexical-table 
        '(("IP_HLEN" . ((number "20" 231 . 233)))
          ("RKNETLIB_TCPIP")
          ("RKNETLIB")
          ("RKNETLIB_TCPIP_IPV4")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [100 108])
            ("RKNETLIB_TCPIP" variable (:constant-flag t) nil [117 131])
            ("RKNETLIB_TCPIP_ETHARP" variable (:constant-flag t) nil [140 161])
            ("rtlib/rtlib.h" include (:system-flag t) nil [163 187])
            ("rknet/rknetlib.h" include (:system-flag t) nil [188 215])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [216 246])
            ("ARP_MAXAGE" variable (:constant-flag t) nil [334 344])
            ("ARP_MAXPENDING" variable (:constant-flag t) nil [437 451])
            ("ARP_TABLE_SIZE" variable (:constant-flag t) nil [502 516])
            ("ETHARP_FLAG_TRY_HARD" variable (:constant-flag t) nil [587 607])
            ("ETHARP_FLAG_FIND_ONLY" variable (:constant-flag t) nil [651 672])
            ("ETHARP_FLAG_STATIC_ENTRY" variable (:constant-flag t) nil [723 747])
            ("SIZEOF_ETHARP_HDR" variable (:constant-flag t) nil [759 776])
            ("SIZEOF_ETHARP_PACKET" variable (:constant-flag t) nil [788 808])
            ("_EtharpState" type
               (:members 
                  ( ("ETHARP_STATE_EMPTY" variable
                       (:constant-flag t
                        :default-value (969 970)
                        :type "int")
                        (reparse-symbol enumsubparts) [948 970])
                    ("ETHARP_STATE_PENDING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1010 1031])
                    ("ETHARP_STATE_STABLE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1033 1054]))                  
                :type "enum")
                nil [919 1067])
            ("EtharpState" type
               (:typedef ("_EtharpState" type (:type "enum") nil nil)
                :type "typedef")
                nil [919 1067])
            ("EtharpQueueEntry" type
               (:typedef ("_EtharpQueueEntry" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [1178 1228])
            ("_EtharpQueueEntry" type
               (:members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("EtharpQueueEntry" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1257 1280])
                    ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1308 1331]))                  
                :type "struct")
                nil [1229 1357])
            ("_EtharpEntry" type
               (:members 
                  ( ("queue" variable
                       (:pointer 1
                        :type ("EtharpQueueEntry" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1540 1564])
                    ("ipAddr" variable (:type ("IpAddr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1566 1591])
                    ("ethAddr" variable (:type ("EtherAddr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1593 1619])
                    ("state" variable (:type ("EtharpState" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1621 1645])
                    ("ctime" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1647 1671])
                    ("staticEntry" variable (:type ("boolean" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1673 1703]))                  
                :type "struct")
                nil [1444 1718])
            ("EtharpEntry" type
               (:typedef ("_EtharpEntry" type (:type "struct") nil nil)
                :type "typedef")
                nil [1444 1718])
            ("g_broadcast" variable
               (:typemodifiers ("static")
                :default-value "{ {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} }"
                :type ("EtherAddr" type (:type "class") nil nil))
                nil [1720 1795])
            ("g_zeroMac" variable
               (:typemodifiers ("static")
                :default-value "{ {0x00, 0x00, 0x00, 0x00, 0x00, 0x00} }"
                :type ("EtherAddr" type (:type "class") nil nil))
                nil [1796 1869])
            ("g_arpTable" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("EtharpEntry" type (:type "class") nil nil))
                nil [1870 1908])
            ("FreeArpTableEntryQueue" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("queue" variable
                       (:pointer 1
                        :type ("EtharpQueueEntry" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1945 1969]))                  
                :type "void")
                nil [1910 2132])
            ("FreeArpTableEntry" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("i" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2164 2172]))                  
                :type "void")
                nil [2134 2382])
            ("FindArpTableEntry" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ipAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2415 2430])
                    ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2431 2443]))                  
                :type ("uint8" type (:type "class") nil nil))
                nil [2384 5780])
            ("EthSendIp" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5805 5819])
                    ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5820 5831])
                    ("src" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5832 5847])
                    ("dst" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5848 5863]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [5782 6133])
            ("UpdateArpEntry" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6310 6325])
                    ("ipAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6327 6345])
                    ("ethAddr" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6347 6366])
                    ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6368 6385]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [6280 7290])
            ("EthArpRaw" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7317 7332])
                    ("ethSrcAddr" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7334 7356])
                    ("ethDstAddr" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7358 7380])
                    ("hwSrcAddr" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7382 7403])
                    ("ipSrcAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7405 7426])
                    ("hwDstAddr" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7428 7449])
                    ("ipDstAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7451 7472])
                    ("opcode" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7474 7494]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [7292 8432])
            ("ArpRequest" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8458 8472])
                    ("ipAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8473 8488]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [8434 8756])
            ("ArpQuery" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8780 8794])
                    ("ipAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8795 8810])
                    ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8811 8822]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [8758 11213])
            ("IPADDR_BROADCAST" variable (:constant-flag t) nil [11223 11239])
            ("EthernetOutput" function
               (:arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11287 11301])
                    ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11302 11313])
                    ("dstAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11314 11330]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [11266 12766])
            ("EthArpInput" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12792 12806])
                    ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12807 12818])
                    ("ethAddr" variable
                       (:pointer 1
                        :type ("EtherAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12819 12838]))                  
                :type "void")
                nil [12768 14075])
            ("EthIpInput" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14100 14114])
                    ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14115 14126]))                  
                :type "void")
                nil [14077 14665])
            ("EthernetInput" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14687 14698])
                    ("netDev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14699 14716]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [14667 16104])
            ("EtharpTimer" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16123 16128]))                  
                :type "void")
                nil [16106 16869])
            ("IsPendingIpAddrExist" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ipAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [16907 16922]))                  
                :type ("boolean" type (:type "class") nil nil))
                nil [16871 17166])
            ("IsOurArpResponce" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17193 17204]))                  
                :type ("boolean" type (:type "class") nil nil))
                nil [17168 17564])
            ("EtharpInit" function
               (:arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [17583 17593]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [17566 17733])
            ("EtharpDeinit" function
               (:arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [17753 17763]))                  
                :type "void")
                nil [17735 17887]))          
      :file "etharp.c"
      :pointmax 17888
      :fsize 20331
      :lastmodtime '(22665 59165 499693 428000)
      :unmatched-syntax nil
      :lexical-table 
        '(("ARP_MAXPENDING" . ((number "2" 452 . 453)))
          ("RKNETLIB_TCPIP_ETHARP")
          ("ETHARP_FLAG_TRY_HARD" . ((number "1" 612 . 613)))
          ("IPADDR_BROADCAST" . ((semantic-list "((uint32)0xffffffff)" 11271 . 11291)))
          ("ETHARP_FLAG_FIND_ONLY" . ((number "2" 676 . 677)))
          ("SIZEOF_ETHARP_PACKET" . ((semantic-list "(sizeof(EtherHdr) + SIZEOF_ETHARP_HDR)" 809 . 847)))
          ("RKNETLIB_TCPIP")
          ("ARP_MAXAGE" . ((number "240" 345 . 348)))
          ("SIZEOF_ETHARP_HDR" . ((number "28" 777 . 779)))
          ("RKNETLIB")
          ("ETHARP_FLAG_STATIC_ENTRY" . ((number "4" 748 . 749)))
          ("ARP_TABLE_SIZE" . ((number "20" 517 . 519)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [87 95])
            ("RKNETLIB_TCPIP" variable (:constant-flag t) nil [104 118])
            ("RKNETLIB_TCPIP_CHECKSUM" variable (:constant-flag t) nil [127 150])
            ("rtlib/rtlib.h" include (:system-flag t) nil [152 176])
            ("rknet/rknetlib.h" include (:system-flag t) nil [177 204])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [205 235])
            ("SWAP_BYTES_IN_WORD" variable (:constant-flag t) nil [556 574])
            ("InetChecksum" function
               (:arguments 
                  ( ("data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [643 654])
                    ("len" variable (:type ("int32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [655 665]))                  
                :type ("uint16" type (:type "class") nil nil))
                nil [623 1104])
            ("InetChecksumPseudo" function
               (:arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1134 1144])
                    ("src" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1146 1158])
                    ("dst" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1160 1172])
                    ("proto" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1174 1188])
                    ("protoLen" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1190 1207]))                  
                :type ("uint16" type (:type "class") nil nil))
                nil [1106 1873]))          
      :file "checksum.c"
      :pointmax 2665
      :fsize 2698
      :lastmodtime '(22652 44347 397441 98000)
      :unmatched-syntax '((punctuation 536 . 537) (symbol 532 . 536) (close-paren 531 . 532) (symbol 525 . 531) (open-paren 524 . 525) (RETURN 517 . 523) (punctuation 514 . 515) (close-paren 513 . 514) (number 511 . 513) (punctuation 509 . 510) (punctuation 508 . 509) (symbol 503 . 507) (open-paren 502 . 503) (punctuation 500 . 501) (punctuation 499 . 500) (symbol 494 . 498) (punctuation 491 . 492) (close-paren 490 . 491) (number 484 . 490) (punctuation 482 . 483) (symbol 477 . 481) (open-paren 476 . 477) (punctuation 474 . 475) (close-paren 472 . 473) (number 470 . 472) (punctuation 468 . 469) (punctuation 467 . 468) (symbol 462 . 466) (open-paren 461 . 462) (punctuation 459 . 460) (symbol 454 . 458) (close-paren 450 . 451) (punctuation 447 . 448) (symbol 443 . 447) (semantic-list 435 . 443) (punctuation 434 . 435) (punctuation 432 . 433) (punctuation 431 . 432) (symbol 426 . 430) (open-paren 422 . 423) (close-paren 420 . 421) (number 419 . 420) (punctuation 417 . 418) (punctuation 416 . 417) (symbol 411 . 415) (open-paren 410 . 411) (IF 407 . 409) (close-paren 403 . 404) (punctuation 400 . 401) (semantic-list 393 . 400) (SIZEOF 387 . 393) (punctuation 385 . 386) (punctuation 384 . 385) (symbol 379 . 383) (punctuation 375 . 376) (punctuation 374 . 375) (punctuation 373 . 374) (symbol 369 . 373) (punctuation 368 . 369) (punctuation 366 . 367) (punctuation 365 . 366) (symbol 360 . 364) (open-paren 356 . 357) (close-paren 354 . 355) (number 353 . 354) (punctuation 351 . 352) (symbol 346 . 350) (open-paren 345 . 346) (WHILE 339 . 344) (punctuation 316 . 317) (symbol 313 . 316) (close-paren 312 . 313) (punctuation 311 . 312) (symbol 305 . 311) (open-paren 304 . 305) (punctuation 302 . 303) (symbol 297 . 301) (punctuation 295 . 296) (symbol 289 . 295) (punctuation 536 . 537) (symbol 532 . 536) (semantic-list 524 . 532) (RETURN 517 . 523) (punctuation 514 . 515) (semantic-list 502 . 514) (punctuation 500 . 501) (punctuation 499 . 500) (symbol 494 . 498) (punctuation 491 . 492) (semantic-list 476 . 491) (punctuation 474 . 475) (semantic-list 461 . 473) (punctuation 459 . 460) (symbol 454 . 458) (semantic-list 422 . 451) (semantic-list 410 . 421) (IF 407 . 409) (semantic-list 356 . 404) (semantic-list 345 . 355) (WHILE 339 . 344) (punctuation 536 . 537) (symbol 532 . 536) (close-paren 531 . 532) (symbol 525 . 531) (open-paren 524 . 525) (RETURN 517 . 523) (punctuation 514 . 515) (close-paren 513 . 514) (number 511 . 513) (punctuation 509 . 510) (punctuation 508 . 509) (symbol 503 . 507) (open-paren 502 . 503) (punctuation 500 . 501) (punctuation 499 . 500) (symbol 494 . 498) (punctuation 491 . 492) (close-paren 490 . 491) (number 484 . 490) (punctuation 482 . 483) (symbol 477 . 481) (open-paren 476 . 477) (punctuation 474 . 475) (close-paren 472 . 473) (number 470 . 472) (punctuation 468 . 469) (punctuation 467 . 468) (symbol 462 . 466) (open-paren 461 . 462) (punctuation 459 . 460) (symbol 454 . 458) (close-paren 450 . 451) (punctuation 447 . 448) (symbol 443 . 447) (close-paren 442 . 443) (punctuation 441 . 442) (symbol 436 . 441) (open-paren 435 . 436) (punctuation 434 . 435) (punctuation 432 . 433) (punctuation 431 . 432) (symbol 426 . 430) (open-paren 422 . 423) (close-paren 420 . 421) (number 419 . 420) (punctuation 417 . 418) (punctuation 416 . 417) (symbol 411 . 415) (open-paren 410 . 411) (IF 407 . 409) (close-paren 403 . 404) (punctuation 400 . 401) (close-paren 399 . 400) (symbol 395 . 399) (punctuation 394 . 395) (open-paren 393 . 394) (SIZEOF 387 . 393) (punctuation 385 . 386) (punctuation 384 . 385) (symbol 379 . 383) (punctuation 375 . 376) (punctuation 374 . 375) (punctuation 373 . 374) (symbol 369 . 373) (punctuation 368 . 369) (punctuation 366 . 367) (punctuation 365 . 366) (symbol 360 . 364) (open-paren 356 . 357) (close-paren 354 . 355) (number 353 . 354) (punctuation 351 . 352) (symbol 346 . 350) (open-paren 345 . 346) (WHILE 339 . 344) (punctuation 316 . 317) (symbol 313 . 316) (close-paren 312 . 313) (punctuation 311 . 312) (symbol 305 . 311) (open-paren 304 . 305) (punctuation 302 . 303) (symbol 297 . 301) (punctuation 295 . 296) (symbol 289 . 295) (punctuation 1101 . 1102) (symbol 1098 . 1101) (close-paren 1097 . 1098) (symbol 1091 . 1097) (open-paren 1090 . 1091) (RETURN 1083 . 1089) (close-paren 1079 . 1080) (punctuation 1076 . 1077) (semantic-list 1071 . 1076) (symbol 1053 . 1071) (punctuation 1051 . 1052) (symbol 1047 . 1050) (open-paren 1043 . 1044) (close-paren 1041 . 1042) (symbol 1038 . 1041) (open-paren 1037 . 1038) (IF 1034 . 1036) (punctuation 1029 . 1030) (close-paren 1028 . 1029) (symbol 1025 . 1028) (open-paren 1024 . 1025) (symbol 1013 . 1024) (punctuation 1011 . 1012) (symbol 1007 . 1010) (punctuation 1004 . 1005) (close-paren 1003 . 1004) (symbol 1000 . 1003) (open-paren 999 . 1000) (symbol 988 . 999) (punctuation 986 . 987) (symbol 982 . 985) (punctuation 978 . 979) (symbol 977 . 978) (punctuation 975 . 976) (punctuation 974 . 975) (symbol 970 . 973) (close-paren 966 . 967) (punctuation 963 . 964) (symbol 961 . 963) (semantic-list 953 . 961) (punctuation 952 . 953) (punctuation 950 . 951) (semantic-list 946 . 949) (semantic-list 934 . 946) (open-paren 930 . 931) (close-paren 928 . 929) (number 927 . 928) (punctuation 925 . 926) (symbol 921 . 924) (open-paren 920 . 921) (IF 917 . 919) (close-paren 913 . 914) (punctuation 910 . 911) (number 909 . 910) (punctuation 907 . 908) (punctuation 906 . 907) (symbol 902 . 905) (punctuation 898 . 899) (punctuation 897 . 898) (punctuation 896 . 897) (symbol 894 . 896) (punctuation 893 . 894) (punctuation 891 . 892) (punctuation 890 . 891) (symbol 886 . 889) (open-paren 882 . 883) (close-paren 880 . 881) (number 879 . 880) (punctuation 877 . 878) (symbol 873 . 876) (open-paren 872 . 873) (WHILE 866 . 871) (punctuation 863 . 864) (symbol 861 . 863) (close-paren 860 . 861) (punctuation 859 . 860) (symbol 853 . 859) (open-paren 852 . 853) (punctuation 850 . 851) (symbol 847 . 849) (close-paren 843 . 844) (punctuation 840 . 841) (punctuation 839 . 840) (punctuation 838 . 839) (symbol 835 . 838) (punctuation 831 . 832) (punctuation 830 . 831) (punctuation 829 . 830) (symbol 827 . 829) (punctuation 826 . 827) (punctuation 824 . 825) (semantic-list 820 . 823) (semantic-list 808 . 820) (open-paren 804 . 805) (close-paren 802 . 803) (number 801 . 802) (punctuation 799 . 800) (symbol 795 . 798) (punctuation 793 . 794) (punctuation 792 . 793) (symbol 788 . 791) (open-paren 787 . 788) (IF 784 . 786) (punctuation 780 . 781) (close-paren 779 . 780) (number 778 . 779) (punctuation 776 . 777) (symbol 773 . 775) (semantic-list 766 . 773) (open-paren 765 . 766) (punctuation 763 . 764) (symbol 759 . 762) (symbol 751 . 756) (punctuation 748 . 749) (symbol 744 . 748) (close-paren 743 . 744) (punctuation 742 . 743) (symbol 737 . 742) (open-paren 736 . 737) (punctuation 734 . 735) (symbol 731 . 733) (punctuation 728 . 729) (symbol 723 . 728) (punctuation 1101 . 1102) (symbol 1098 . 1101) (semantic-list 1090 . 1098) (RETURN 1083 . 1089) (semantic-list 1043 . 1080) (semantic-list 1037 . 1042) (IF 1034 . 1036) (punctuation 1029 . 1030) (semantic-list 1024 . 1029) (symbol 1013 . 1024) (punctuation 1011 . 1012) (symbol 1007 . 1010) (punctuation 1004 . 1005) (semantic-list 999 . 1004) (symbol 988 . 999) (punctuation 986 . 987) (symbol 982 . 985) (punctuation 978 . 979) (symbol 977 . 978) (punctuation 975 . 976) (punctuation 974 . 975) (symbol 970 . 973) (semantic-list 930 . 967) (semantic-list 920 . 929) (IF 917 . 919) (semantic-list 882 . 914) (semantic-list 872 . 881) (WHILE 866 . 871) (punctuation 863 . 864) (symbol 861 . 863) (semantic-list 852 . 861) (punctuation 850 . 851) (symbol 847 . 849) (semantic-list 804 . 844) (semantic-list 787 . 803) (IF 784 . 786) (punctuation 1101 . 1102) (symbol 1098 . 1101) (close-paren 1097 . 1098) (symbol 1091 . 1097) (open-paren 1090 . 1091) (RETURN 1083 . 1089) (close-paren 1079 . 1080) (punctuation 1076 . 1077) (close-paren 1075 . 1076) (symbol 1072 . 1075) (open-paren 1071 . 1072) (symbol 1053 . 1071) (punctuation 1051 . 1052) (symbol 1047 . 1050) (open-paren 1043 . 1044) (close-paren 1041 . 1042) (symbol 1038 . 1041) (open-paren 1037 . 1038) (IF 1034 . 1036) (punctuation 1029 . 1030) (close-paren 1028 . 1029) (symbol 1025 . 1028) (open-paren 1024 . 1025) (symbol 1013 . 1024) (punctuation 1011 . 1012) (symbol 1007 . 1010) (punctuation 1004 . 1005) (close-paren 1003 . 1004) (symbol 1000 . 1003) (open-paren 999 . 1000) (symbol 988 . 999) (punctuation 986 . 987) (symbol 982 . 985) (punctuation 978 . 979) (symbol 977 . 978) (punctuation 975 . 976) (punctuation 974 . 975) (symbol 970 . 973) (close-paren 966 . 967) (punctuation 963 . 964) (symbol 961 . 963) (close-paren 960 . 961) (punctuation 959 . 960) (symbol 954 . 959) (open-paren 953 . 954) (punctuation 952 . 953) (punctuation 950 . 951) (close-paren 948 . 949) (number 947 . 948) (open-paren 946 . 947) (close-paren 945 . 946) (symbol 944 . 945) (punctuation 943 . 944) (close-paren 942 . 943) (punctuation 941 . 942) (symbol 936 . 941) (open-paren 935 . 936) (open-paren 934 . 935) (open-paren 930 . 931) (close-paren 928 . 929) (number 927 . 928) (punctuation 925 . 926) (symbol 921 . 924) (open-paren 920 . 921) (IF 917 . 919) (close-paren 913 . 914) (punctuation 910 . 911) (number 909 . 910) (punctuation 907 . 908) (punctuation 906 . 907) (symbol 902 . 905) (punctuation 898 . 899) (punctuation 897 . 898) (punctuation 896 . 897) (symbol 894 . 896) (punctuation 893 . 894) (punctuation 891 . 892) (punctuation 890 . 891) (symbol 886 . 889) (open-paren 882 . 883) (close-paren 880 . 881) (number 879 . 880) (punctuation 877 . 878) (symbol 873 . 876) (open-paren 872 . 873) (WHILE 866 . 871) (punctuation 863 . 864) (symbol 861 . 863) (close-paren 860 . 861) (punctuation 859 . 860) (symbol 853 . 859) (open-paren 852 . 853) (punctuation 850 . 851) (symbol 847 . 849) (close-paren 843 . 844) (punctuation 840 . 841) (punctuation 839 . 840) (punctuation 838 . 839) (symbol 835 . 838) (punctuation 831 . 832) (punctuation 830 . 831) (punctuation 829 . 830) (symbol 827 . 829) (punctuation 826 . 827) (punctuation 824 . 825) (close-paren 822 . 823) (number 821 . 822) (open-paren 820 . 821) (close-paren 819 . 820) (symbol 818 . 819) (punctuation 817 . 818) (close-paren 816 . 817) (punctuation 815 . 816) (symbol 810 . 815) (open-paren 809 . 810) (open-paren 808 . 809) (open-paren 804 . 805) (close-paren 802 . 803) (number 801 . 802) (punctuation 799 . 800) (symbol 795 . 798) (punctuation 793 . 794) (punctuation 792 . 793) (symbol 788 . 791) (open-paren 787 . 788) (IF 784 . 786) (punctuation 780 . 781) (close-paren 779 . 780) (number 778 . 779) (punctuation 776 . 777) (symbol 773 . 775) (close-paren 772 . 773) (symbol 767 . 772) (open-paren 766 . 767) (open-paren 765 . 766) (punctuation 763 . 764) (symbol 759 . 762) (symbol 751 . 756) (punctuation 748 . 749) (symbol 744 . 748) (close-paren 743 . 744) (punctuation 742 . 743) (symbol 737 . 742) (open-paren 736 . 737) (punctuation 734 . 735) (symbol 731 . 733) (punctuation 728 . 729) (symbol 723 . 728) (punctuation 1870 . 1871) (semantic-list 1854 . 1870) (punctuation 1853 . 1854) (semantic-list 1845 . 1853) (RETURN 1838 . 1844) (punctuation 1834 . 1835) (semantic-list 1829 . 1834) (symbol 1818 . 1829) (punctuation 1816 . 1817) (symbol 1812 . 1815) (punctuation 1809 . 1810) (semantic-list 1804 . 1809) (symbol 1793 . 1804) (punctuation 1791 . 1792) (symbol 1787 . 1790) (punctuation 1783 . 1784) (semantic-list 1773 . 1783) (symbol 1766 . 1773) (semantic-list 1758 . 1766) (punctuation 1756 . 1757) (punctuation 1755 . 1756) (symbol 1751 . 1754) (punctuation 1748 . 1749) (semantic-list 1733 . 1748) (symbol 1726 . 1733) (semantic-list 1718 . 1726) (punctuation 1716 . 1717) (punctuation 1715 . 1716) (symbol 1711 . 1714) (punctuation 1706 . 1707) (semantic-list 1681 . 1706) (punctuation 1679 . 1680) (punctuation 1678 . 1679) (symbol 1674 . 1677) (punctuation 1671 . 1672) (semantic-list 1654 . 1671) (punctuation 1652 . 1653) (punctuation 1651 . 1652) (symbol 1647 . 1650) (punctuation 1644 . 1645) (symbol 1640 . 1644) (punctuation 1639 . 1640) (punctuation 1638 . 1639) (symbol 1635 . 1638) (punctuation 1633 . 1634) (symbol 1628 . 1632) (punctuation 1624 . 1625) (semantic-list 1599 . 1624) (punctuation 1597 . 1598) (punctuation 1596 . 1597) (symbol 1592 . 1595) (punctuation 1589 . 1590) (semantic-list 1572 . 1589) (punctuation 1570 . 1571) (punctuation 1569 . 1570) (symbol 1565 . 1568) (punctuation 1562 . 1563) (symbol 1558 . 1562) (punctuation 1557 . 1558) (punctuation 1556 . 1557) (symbol 1553 . 1556) (punctuation 1551 . 1552) (symbol 1546 . 1550) (semantic-list 1506 . 1543) (semantic-list 1491 . 1505) (IF 1488 . 1490) (semantic-list 1322 . 1484) (semantic-list 1290 . 1321) (FOR 1286 . 1289) (punctuation 1870 . 1871) (close-paren 1869 . 1870) (symbol 1861 . 1869) (punctuation 1859 . 1860) (symbol 1855 . 1858) (open-paren 1854 . 1855) (punctuation 1853 . 1854) (close-paren 1852 . 1853) (symbol 1846 . 1852) (open-paren 1845 . 1846) (RETURN 1838 . 1844) (punctuation 1834 . 1835) (close-paren 1833 . 1834) (symbol 1830 . 1833) (open-paren 1829 . 1830) (symbol 1818 . 1829) (punctuation 1816 . 1817) (symbol 1812 . 1815) (punctuation 1809 . 1810) (close-paren 1808 . 1809) (symbol 1805 . 1808) (open-paren 1804 . 1805) (symbol 1793 . 1804) (punctuation 1791 . 1792) (symbol 1787 . 1790) (punctuation 1783 . 1784) (close-paren 1782 . 1783) (symbol 1774 . 1782) (open-paren 1773 . 1774) (symbol 1766 . 1773) (close-paren 1765 . 1766) (symbol 1759 . 1765) (open-paren 1758 . 1759) (punctuation 1756 . 1757) (punctuation 1755 . 1756) (symbol 1751 . 1754) (punctuation 1748 . 1749) (close-paren 1747 . 1748) (symbol 1742 . 1747) (close-paren 1741 . 1742) (symbol 1735 . 1741) (open-paren 1734 . 1735) (open-paren 1733 . 1734) (symbol 1726 . 1733) (close-paren 1725 . 1726) (symbol 1719 . 1725) (open-paren 1718 . 1719) (punctuation 1716 . 1717) (punctuation 1715 . 1716) (symbol 1711 . 1714) (punctuation 1706 . 1707) (close-paren 1705 . 1706) (symbol 1697 . 1705) (punctuation 1695 . 1696) (close-paren 1693 . 1694) (number 1691 . 1693) (punctuation 1689 . 1690) (punctuation 1688 . 1689) (symbol 1683 . 1687) (open-paren 1682 . 1683) (open-paren 1681 . 1682) (punctuation 1679 . 1680) (punctuation 1678 . 1679) (symbol 1674 . 1677) (punctuation 1671 . 1672) (close-paren 1670 . 1671) (symbol 1662 . 1670) (punctuation 1660 . 1661) (symbol 1655 . 1659) (open-paren 1654 . 1655) (punctuation 1652 . 1653) (punctuation 1651 . 1652) (symbol 1647 . 1650) (punctuation 1644 . 1645) (symbol 1640 . 1644) (punctuation 1639 . 1640) (punctuation 1638 . 1639) (symbol 1635 . 1638) (punctuation 1633 . 1634) (symbol 1628 . 1632) (punctuation 1624 . 1625) (close-paren 1623 . 1624) (symbol 1615 . 1623) (punctuation 1613 . 1614) (close-paren 1611 . 1612) (number 1609 . 1611) (punctuation 1607 . 1608) (punctuation 1606 . 1607) (symbol 1601 . 1605) (open-paren 1600 . 1601) (open-paren 1599 . 1600) (punctuation 1597 . 1598) (punctuation 1596 . 1597) (symbol 1592 . 1595) (punctuation 1589 . 1590) (close-paren 1588 . 1589) (symbol 1580 . 1588) (punctuation 1578 . 1579) (symbol 1573 . 1577) (open-paren 1572 . 1573) (punctuation 1570 . 1571) (punctuation 1569 . 1570) (symbol 1565 . 1568) (punctuation 1562 . 1563) (symbol 1558 . 1562) (punctuation 1557 . 1558) (punctuation 1556 . 1557) (symbol 1553 . 1556) (punctuation 1551 . 1552) (symbol 1546 . 1550) (close-paren 1542 . 1543) (punctuation 1539 . 1540) (close-paren 1538 . 1539) (symbol 1535 . 1538) (open-paren 1534 . 1535) (symbol 1516 . 1534) (punctuation 1514 . 1515) (symbol 1510 . 1513) (open-paren 1506 . 1507) (close-paren 1504 . 1505) (number 1503 . 1504) (punctuation 1501 . 1502) (punctuation 1500 . 1501) (symbol 1492 . 1499) (open-paren 1491 . 1492) (IF 1488 . 1490) (close-paren 1483 . 1484) (close-paren 1480 . 1481) (punctuation 1476 . 1477) (close-paren 1475 . 1476) (symbol 1472 . 1475) (open-paren 1471 . 1472) (symbol 1453 . 1471) (punctuation 1451 . 1452) (symbol 1447 . 1450) (punctuation 1442 . 1443) (symbol 1435 . 1442) (punctuation 1433 . 1434) (number 1431 . 1432) (punctuation 1429 . 1430) (symbol 1421 . 1428) (open-paren 1416 . 1417) (close-paren 1414 . 1415) (number 1413 . 1414) (punctuation 1411 . 1412) (punctuation 1410 . 1411) (number 1408 . 1409) (punctuation 1406 . 1407) (symbol 1402 . 1405) (punctuation 1401 . 1402) (punctuation 1400 . 1401) (symbol 1399 . 1400) (open-paren 1398 . 1399) (IF 1395 . 1397) (punctuation 1391 . 1392) (close-paren 1390 . 1391) (symbol 1387 . 1390) (open-paren 1386 . 1387) (symbol 1375 . 1386) (punctuation 1373 . 1374) (symbol 1369 . 1372) (punctuation 1365 . 1366) (close-paren 1364 . 1365) (symbol 1361 . 1364) (punctuation 1360 . 1361) (punctuation 1359 . 1360) (symbol 1358 . 1359) (punctuation 1356 . 1357) (symbol 1349 . 1356) (punctuation 1348 . 1349) (punctuation 1347 . 1348) (symbol 1346 . 1347) (open-paren 1345 . 1346) (symbol 1333 . 1345) (punctuation 1331 . 1332) (punctuation 1330 . 1331) (symbol 1326 . 1329) (open-paren 1322 . 1323) (close-paren 1320 . 1321) (symbol 1316 . 1320) (punctuation 1315 . 1316) (punctuation 1314 . 1315) (symbol 1313 . 1314) (punctuation 1311 . 1312) (symbol 1309 . 1310) (punctuation 1307 . 1308) (symbol 1303 . 1307) (punctuation 1301 . 1302) (punctuation 1300 . 1301) (symbol 1298 . 1299) (punctuation 1296 . 1297) (symbol 1295 . 1296) (punctuation 1293 . 1294) (symbol 1291 . 1292) (open-paren 1290 . 1291) (FOR 1286 . 1289) (punctuation 2654 . 2655) (semantic-list 2638 . 2654) (punctuation 2637 . 2638) (semantic-list 2629 . 2637) (RETURN 2622 . 2628) (punctuation 2619 . 2620) (semantic-list 2614 . 2619) (symbol 2603 . 2614) (punctuation 2601 . 2602) (symbol 2597 . 2600) (punctuation 2594 . 2595) (semantic-list 2589 . 2594) (symbol 2578 . 2589) (punctuation 2576 . 2577) (symbol 2572 . 2575) (punctuation 2568 . 2569) (semantic-list 2544 . 2568) (symbol 2537 . 2544) (semantic-list 2529 . 2537) (punctuation 2527 . 2528) (punctuation 2526 . 2527) (symbol 2522 . 2525) (punctuation 2519 . 2520) (semantic-list 2504 . 2519) (symbol 2497 . 2504) (semantic-list 2489 . 2497) (punctuation 2487 . 2488) (punctuation 2486 . 2487) (symbol 2482 . 2485) (punctuation 2478 . 2479) (semantic-list 2444 . 2478) (punctuation 2442 . 2443) (punctuation 2441 . 2442) (symbol 2437 . 2440) (punctuation 2434 . 2435) (semantic-list 2408 . 2434) (punctuation 2406 . 2407) (punctuation 2405 . 2406) (symbol 2401 . 2404) (punctuation 2398 . 2399) (semantic-list 2364 . 2398) (punctuation 2362 . 2363) (punctuation 2361 . 2362) (symbol 2357 . 2360) (punctuation 2354 . 2355) (semantic-list 2328 . 2354) (punctuation 2326 . 2327) (punctuation 2325 . 2326) (symbol 2321 . 2324) (semantic-list 2284 . 2318) (semantic-list 2269 . 2283) (IF 2266 . 2268) (semantic-list 2094 . 2262) (semantic-list 2059 . 2093) (FOR 2055 . 2058) (punctuation 2654 . 2655) (close-paren 2653 . 2654) (symbol 2645 . 2653) (punctuation 2643 . 2644) (symbol 2639 . 2642) (open-paren 2638 . 2639) (punctuation 2637 . 2638) (close-paren 2636 . 2637) (symbol 2630 . 2636) (open-paren 2629 . 2630) (RETURN 2622 . 2628) (punctuation 2619 . 2620) (close-paren 2618 . 2619) (symbol 2615 . 2618) (open-paren 2614 . 2615) (symbol 2603 . 2614) (punctuation 2601 . 2602) (symbol 2597 . 2600) (punctuation 2594 . 2595) (close-paren 2593 . 2594) (symbol 2590 . 2593) (open-paren 2589 . 2590) (symbol 2578 . 2589) (punctuation 2576 . 2577) (symbol 2572 . 2575) (punctuation 2568 . 2569) (close-paren 2567 . 2568) (symbol 2559 . 2567) (punctuation 2558 . 2559) (punctuation 2557 . 2558) (symbol 2553 . 2557) (close-paren 2552 . 2553) (symbol 2546 . 2552) (open-paren 2545 . 2546) (open-paren 2544 . 2545) (symbol 2537 . 2544) (close-paren 2536 . 2537) (symbol 2530 . 2536) (open-paren 2529 . 2530) (punctuation 2527 . 2528) (punctuation 2526 . 2527) (symbol 2522 . 2525) (punctuation 2519 . 2520) (close-paren 2518 . 2519) (symbol 2513 . 2518) (close-paren 2512 . 2513) (symbol 2506 . 2512) (open-paren 2505 . 2506) (open-paren 2504 . 2505) (symbol 2497 . 2504) (close-paren 2496 . 2497) (symbol 2490 . 2496) (open-paren 2489 . 2490) (punctuation 2487 . 2488) (punctuation 2486 . 2487) (symbol 2482 . 2485) (punctuation 2478 . 2479) (close-paren 2477 . 2478) (symbol 2469 . 2477) (punctuation 2467 . 2468) (close-paren 2465 . 2466) (number 2463 . 2465) (punctuation 2461 . 2462) (punctuation 2460 . 2461) (symbol 2455 . 2459) (punctuation 2454 . 2455) (punctuation 2453 . 2454) (symbol 2446 . 2453) (open-paren 2445 . 2446) (open-paren 2444 . 2445) (punctuation 2442 . 2443) (punctuation 2441 . 2442) (symbol 2437 . 2440) (punctuation 2434 . 2435) (close-paren 2433 . 2434) (symbol 2425 . 2433) (punctuation 2423 . 2424) (symbol 2418 . 2422) (punctuation 2417 . 2418) (punctuation 2416 . 2417) (symbol 2409 . 2416) (open-paren 2408 . 2409) (punctuation 2406 . 2407) (punctuation 2405 . 2406) (symbol 2401 . 2404) (punctuation 2398 . 2399) (close-paren 2397 . 2398) (symbol 2389 . 2397) (punctuation 2387 . 2388) (close-paren 2385 . 2386) (number 2383 . 2385) (punctuation 2381 . 2382) (punctuation 2380 . 2381) (symbol 2375 . 2379) (punctuation 2374 . 2375) (punctuation 2373 . 2374) (symbol 2366 . 2373) (open-paren 2365 . 2366) (open-paren 2364 . 2365) (punctuation 2362 . 2363) (punctuation 2361 . 2362) (symbol 2357 . 2360) (punctuation 2354 . 2355) (close-paren 2353 . 2354) (symbol 2345 . 2353) (punctuation 2343 . 2344) (symbol 2338 . 2342) (punctuation 2337 . 2338) (punctuation 2336 . 2337) (symbol 2329 . 2336) (open-paren 2328 . 2329) (punctuation 2326 . 2327) (punctuation 2325 . 2326) (symbol 2321 . 2324) (close-paren 2317 . 2318) (punctuation 2314 . 2315) (close-paren 2313 . 2314) (symbol 2310 . 2313) (close-paren 2309 . 2310) (symbol 2303 . 2309) (open-paren 2302 . 2303) (open-paren 2301 . 2302) (symbol 2294 . 2301) (punctuation 2292 . 2293) (symbol 2288 . 2291) (open-paren 2284 . 2285) (close-paren 2282 . 2283) (number 2281 . 2282) (punctuation 2279 . 2280) (punctuation 2278 . 2279) (symbol 2270 . 2277) (open-paren 2269 . 2270) (IF 2266 . 2268) (close-paren 2261 . 2262) (close-paren 2258 . 2259) (punctuation 2254 . 2255) (close-paren 2253 . 2254) (symbol 2250 . 2253) (close-paren 2249 . 2250) (symbol 2243 . 2249) (open-paren 2242 . 2243) (open-paren 2241 . 2242) (symbol 2234 . 2241) (close-paren 2233 . 2234) (symbol 2227 . 2233) (open-paren 2226 . 2227) (punctuation 2224 . 2225) (symbol 2220 . 2223) (punctuation 2215 . 2216) (symbol 2208 . 2215) (punctuation 2206 . 2207) (number 2204 . 2205) (punctuation 2202 . 2203) (symbol 2194 . 2201) (open-paren 2189 . 2190) (close-paren 2187 . 2188) (number 2186 . 2187) (punctuation 2184 . 2185) (punctuation 2183 . 2184) (number 2181 . 2182) (punctuation 2179 . 2180) (symbol 2175 . 2178) (punctuation 2174 . 2175) (punctuation 2173 . 2174) (symbol 2172 . 2173) (open-paren 2171 . 2172) (IF 2168 . 2170) (punctuation 2163 . 2164) (close-paren 2162 . 2163) (symbol 2159 . 2162) (open-paren 2158 . 2159) (symbol 2147 . 2158) (punctuation 2145 . 2146) (symbol 2141 . 2144) (punctuation 2137 . 2138) (close-paren 2136 . 2137) (symbol 2133 . 2136) (punctuation 2132 . 2133) (punctuation 2131 . 2132) (symbol 2130 . 2131) (punctuation 2128 . 2129) (symbol 2121 . 2128) (punctuation 2120 . 2121) (punctuation 2119 . 2120) (symbol 2118 . 2119) (open-paren 2117 . 2118) (symbol 2105 . 2117) (punctuation 2103 . 2104) (punctuation 2102 . 2103) (symbol 2098 . 2101) (open-paren 2094 . 2095) (close-paren 2092 . 2093) (symbol 2088 . 2092) (punctuation 2087 . 2088) (punctuation 2086 . 2087) (symbol 2085 . 2086) (punctuation 2083 . 2084) (symbol 2081 . 2082) (punctuation 2079 . 2080) (symbol 2075 . 2079) (punctuation 2073 . 2074) (punctuation 2072 . 2073) (symbol 2070 . 2071) (punctuation 2068 . 2069) (symbol 2064 . 2068) (punctuation 2062 . 2063) (symbol 2060 . 2061) (open-paren 2059 . 2060) (FOR 2055 . 2058))
      :lexical-table 
        '(("RKNETLIB_TCPIP")
          ("SWAP_BYTES_IN_WORD" (spp-arg-list ("w") 574 . 577) . 
              ((semantic-list "(((w) & 0xff) << 8)" 578 . 597) (punctuation "|" 598 . 599) (semantic-list "(((w) & 0xff00) >> 8)" 600 . 621)))
          ("RKNETLIB")
          ("RKNETLIB_TCPIP_CHECKSUM")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("__TCP_IMPL_H__" variable (:constant-flag t) nil [143 157])
            ("_TcpHdr" type
               (:members 
                  ( ("src" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [207 218])
                    ("dst" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [220 231])
                    ("seqno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol classsubparts) [233 246])
                    ("ackno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol classsubparts) [248 261])
                    ("hdrLenRcvdFlags" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [263 286])
                    ("wnd" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [288 299])
                    ("chksum" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [301 315])
                    ("urgp" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [317 329]))                  
                :type "struct")
                nil [181 339])
            ("TcpHdr" type
               (:typedef ("_TcpHdr" type (:type "struct") nil nil)
                :type "typedef")
                nil [181 339])
            ("TCP_FIN" variable (:constant-flag t) nil [385 392])
            ("TCP_SYN" variable (:constant-flag t) nil [407 414])
            ("TCP_RST" variable (:constant-flag t) nil [429 436])
            ("TCP_PSH" variable (:constant-flag t) nil [451 458])
            ("TCP_ACK" variable (:constant-flag t) nil [473 480])
            ("TCP_URG" variable (:constant-flag t) nil [495 502])
            ("TCP_ECE" variable (:constant-flag t) nil [517 524])
            ("TCP_CWR" variable (:constant-flag t) nil [539 546])
            ("TCP_FLAGS" variable (:constant-flag t) nil [561 570])
            ("TCPH_OFFSET_SET" variable (:constant-flag t) nil [586 601])
            ("TCPH_HDRLEN_SET" variable (:constant-flag t) nil [695 710])
            ("TCPH_OFFSET" variable (:constant-flag t) nil [800 811])
            ("TCPH_HDRLEN" variable (:constant-flag t) nil [875 886])
            ("TCPH_FLAGS_SET" variable (:constant-flag t) nil [951 965])
            ("TCPH_HDRLEN_FLAGS_SET" variable (:constant-flag t) nil [1114 1135])
            ("TCPH_SET_FLAG" variable (:constant-flag t) nil [1234 1247])
            ("TCPH_UNSET_FLAG" variable (:constant-flag t) nil [1351 1366])
            ("TCPH_FLAGS" variable (:constant-flag t) nil [1492 1502])
            ("TCP_TCPLEN" variable (:constant-flag t) nil [1573 1583])
            ("TcpSeg" type
               (:typedef ("_TcpSeg" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [1671 1701])
            ("TCP_HLEN" variable (:constant-flag t) nil [1749 1757])
            ("TF_SEG_OPTS_MSS" variable (:constant-flag t) nil [1800 1815])
            ("TF_SEG_OPTS_TS" variable (:constant-flag t) nil [1871 1885])
            ("TF_SEG_DATA_CHECKSUMMED" variable (:constant-flag t) nil [1948 1971])
            ("TCP_TMR_INTERVAL" variable (:constant-flag t) nil [2147 2163])
            ("TCP_FAST_INTERVAL" variable (:constant-flag t) nil [2230 2247])
            ("TCP_SLOW_INTERVAL" variable (:constant-flag t) nil [2320 2337])
            ("TCP_FIN_WAIT_TIMEOUT" variable (:constant-flag t) nil [2377 2397])
            ("TCP_SYN_RCVD_TIMEOUT" variable (:constant-flag t) nil [2416 2436])
            ("TCP_MSL" variable (:constant-flag t) nil [2490 2497])
            ("TCP_OOSEQ_TIMEOUT" variable (:constant-flag t) nil [2532 2549])
            ("TCP_KEEPIDLE_DEFAULT" variable (:constant-flag t) nil [2625 2645])
            ("TCP_KEEPINTVL_DEFAULT" variable (:constant-flag t) nil [2725 2746])
            ("TCP_KEEPCNT_DEFAULT" variable (:constant-flag t) nil [2816 2835])
            ("TCP_MAXIDLE" variable (:constant-flag t) nil [2898 2909])
            ("TCP_OPT_LEN" variable (:constant-flag t) nil [3011 3022])
            ("TCP_SEQ_LT" variable (:constant-flag t) nil [3137 3147])
            ("TCP_SEQ_LEQ" variable (:constant-flag t) nil [3193 3204])
            ("TCP_SEQ_GT" variable (:constant-flag t) nil [3250 3260])
            ("TCP_SEQ_GEQ" variable (:constant-flag t) nil [3306 3317])
            ("TCP_SEQ_BETWEEN" variable (:constant-flag t) nil [3363 3378])
            ("TcpRegPcb" variable (:constant-flag t) nil [3434 3443])
            ("TcpRemPcb" variable (:constant-flag t) nil [3621 3630])
            ("TcpEventAccept" variable (:constant-flag t) nil [4541 4555])
            ("TcpEventConnected" variable (:constant-flag t) nil [5027 5044])
            ("TcpEventRecv" variable (:constant-flag t) nil [5562 5574])
            ("TcpEventSent" variable (:constant-flag t) nil [5969 5981])
            ("TcpEventClosed" variable (:constant-flag t) nil [6486 6500])
            ("TcpEventErr" variable (:constant-flag t) nil [6960 6971])
            ("TcpEventPoll" variable (:constant-flag t) nil [7192 7204])
            ("TcpDoOutputNagel" variable (:constant-flag t) nil [7852 7868])
            ("TcpOutputNagel" variable (:constant-flag t) nil [8218 8232])
            ("TCP_BUILD_MSS_OPTION" variable (:constant-flag t) nil [8422 8442])
            ("_TcpSeg" type
               (:members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [8744 8757])
                    ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [8759 8772])
                    ("len" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8774 8786])
                    ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8788 8802])
                    ("tcpHdr" variable
                       (:pointer 1
                        :type ("TcpHdr" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [8804 8819]))                  
                :type "struct")
                nil [8726 8822])
            ("TcpZeroWindowProbe" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9098 9110]))                  
                :type "void")
                nil [9074 9111])
            ("TcpEffSendMss" function
               (:prototype-flag t
                :arguments 
                  ( ("sendMss" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9134 9149])
                    ("addr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9150 9163]))                  
                :type ("uint16" type (:type "class") nil nil))
                nil [9113 9164])
            ("TcpAbandon" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9182 9194])
                    ("reset" variable (:type ("boolean" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9195 9209]))                  
                :type "void")
                nil [9166 9210])
            ("TcpSendEmptyAck" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9234 9246]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [9212 9247])
            ("TcpRexmit" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9343 9355]))                  
                :type "void")
                nil [9328 9356])
            ("TcpRexmitFast" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9377 9389]))                  
                :type "void")
                nil [9358 9390])
            ("TcpUpdateRcvAnnWnd" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9418 9430]))                  
                :type ("uint32" type (:type "class") nil nil))
                nil [9392 9431])
            ("TcpRexmitRto" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9604 9616]))                  
                :type "void")
                nil [9586 9617])
            ("TcpKeepalive" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9637 9649]))                  
                :type "void")
                nil [9619 9650])
            ("TcpSendFin" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9669 9681]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [9652 9682])
            ("TcpEnqueueFlags" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9706 9718])
                    ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9719 9731]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [9684 9732])
            ("TcpAbort" function
               (:prototype-flag t
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9748 9760]))                  
                :type "void")
                nil [9734 9761])
            ("TcpRst" function
               (:prototype-flag t
                :arguments 
                  ( ("seqno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10533 10547])
                    ("ackno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10549 10563])
                    ("localIp" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10565 10581])
                    ("remoteIp" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10583 10600])
                    ("localPort" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10602 10620])
                    ("remotePort" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10622 10641]))                  
                :type "void")
                nil [10519 10642])
            ("TcpSegmentCreate" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("pcb" variable
                       (:pointer 1
                        :type ("TcpPcb" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10671 10683])
                    ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10685 10695])
                    ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10697 10711])
                    ("seqno" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10713 10727])
                    ("optFlags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10729 10746]))                  
                :type ("TcpSeg" type (:type "class") nil nil))
                nil [10644 10747])
            ("TcpSegmentFree" function
               (:prototype-flag t
                :arguments 
                  ( ("seg" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10769 10781]))                  
                :type "void")
                nil [10749 10782])
            ("TcpSegmentCopy" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("seg" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10807 10819]))                  
                :type ("TcpSeg" type (:type "class") nil nil))
                nil [10784 10820])
            ("TcpSegmentsFree" function
               (:prototype-flag t
                :arguments 
                  ( ("seg" variable
                       (:pointer 1
                        :type ("TcpSeg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10843 10855]))                  
                :type "void")
                nil [10822 10856]))          
      :file "tcp_impl.h"
      :pointmax 10887
      :fsize 12057
      :lastmodtime '(22652 44347 397441 98000)
      :unmatched-syntax '((semantic-list 352 . 357) (symbol 348 . 352) (symbol 341 . 347) (punctuation 340 . 341) (semantic-list 171 . 180) (symbol 167 . 171) (number 178 . 179) (symbol 160 . 166) (number 178 . 179) (punctuation 159 . 160) (symbol 332 . 338) (close-paren 330 . 331) (symbol 332 . 338) (close-paren 330 . 331) (close-paren 8820 . 8821) (close-paren 8820 . 8821))
      :lexical-table 
        '(("TCP_RST" . ((symbol "0x04U" 437 . 442)))
          ("TCP_FIN_WAIT_TIMEOUT" . ((number "20000" 2402 . 2407)))
          ("TCP_SEQ_LT" (spp-arg-list ("_a" "_b") 3147 . 3155) . ((semantic-list "((int32)((_a)-(_b)) < 0)" 3160 . 3184)))
          ("TCPH_UNSET_FLAG" (spp-arg-list ("phdr" "flags") 1366 . 1379) . 
              ((semantic-list "(phdr)" 1380 . 1386) (punctuation "-" 1386 . 1387) (punctuation ">" 1387 . 1388) (symbol "_hdrlen_rsvd_flags" 1388 . 1406) (punctuation "=" 1407 . 1408) (symbol "htons" 1409 . 1414) (semantic-list "(ntohs((phdr)->_hdrlen_rsvd_flags) | (TCPH_FLAGS(phdr) & ~(flags)) )" 1414 . 1482)))
          ("TF_SEG_OPTS_MSS" . ((semantic-list "(uint8)" 1824 . 1831) (symbol "0x01U" 1831 . 1836)))
          ("TCP_ECE" . ((symbol "0x40U" 525 . 530)))
          ("TCPH_HDRLEN_FLAGS_SET" (spp-arg-list ("_phdr" "_len" "_flags") 1135 . 1156) . 
              ((semantic-list "(_phdr)" 1163 . 1170) (punctuation "-" 1170 . 1171) (punctuation ">" 1171 . 1172) (symbol "hdrLenRcvdFlags" 1172 . 1187) (punctuation "=" 1188 . 1189) (symbol "Rthtons" 1190 . 1197) (semantic-list "(((_len) << 12) | (_flags))" 1197 . 1224)))
          ("TCPH_HDRLEN" (spp-arg-list ("_phdr") 886 . 893) . ((semantic-list "(Rtntohs((_phdr)->hdrLenRcvdFlags) >> 12)" 900 . 941)))
          ("TCP_KEEPCNT_DEFAULT" . ((symbol "9UL" 2841 . 2844)))
          ("TcpEventClosed" (spp-arg-list ("_pcb" "_ret") 6500 . 6512) . 
              ((DO "do" 6519 . 6521) (semantic-list "{                                                            \\
        if ((_pcb)->recv != NULL) {                                 \\
            (_ret) = (_pcb)->recv((_pcb)->cbArgs, (_pcb), NULL, 0); \\
        } else {                                                    \\
            (_ret) = 0;                                             \\
        }                                                           \\
    }" 6522 . 6940) (WHILE "while" 6941 . 6946) (semantic-list "(0)" 6947 . 6950)))
          ("TcpDoOutputNagel" (spp-arg-list ("_pcb") 7868 . 7874) . ((semantic-list "((((_pcb)->unacked == NULL) ||                                  \\
    ((_pcb)->flags & (TF_NODELAY | TF_INFR)) ||                     \\
    (((_pcb)->unsent != NULL) && (((_pcb)->unsent->next != NULL) || \\
    ((_pcb)->unsent->len >= (_pcb)->mss)))                          \\
    ) ? 1 : 0)" 7918 . 8208)))
          ("TCP_FLAGS" . ((symbol "0x3fU" 571 . 576)))
          ("TCPH_FLAGS_SET" (spp-arg-list ("_phdr" "_flags") 965 . 980) . 
              ((semantic-list "(_phdr)" 987 . 994) (punctuation "-" 994 . 995) (punctuation ">" 995 . 996) (symbol "hdrLenRcvdFlags" 996 . 1011) (punctuation "=" 1012 . 1013) (semantic-list "(((_phdr)->hdrLenRcvdFlags & RtPpHtons((uint16)(~(uint16)(TCP_FLAGS)))) | Rthtons(_flags))" 1014 . 1104)))
          ("TCP_SEQ_GEQ" (spp-arg-list ("_a" "_b") 3317 . 3325) . ((semantic-list "((int32)((_a)-(_b)) >= 0)" 3329 . 3354)))
          ("TCP_CWR" . ((symbol "0x80U" 547 . 552)))
          ("TCPH_FLAGS" (spp-arg-list ("_phdr") 1502 . 1509) . ((semantic-list "(Rtntohs((_phdr)->hdrLenRcvdFlags) & TCP_FLAGS)" 1516 . 1563)))
          ("TCP_OOSEQ_TIMEOUT" . ((symbol "6U" 2557 . 2559)))
          ("TCP_KEEPIDLE_DEFAULT" . ((symbol "7200000UL" 2650 . 2659)))
          ("TcpRegPcb" (spp-arg-list ("_pcbs" "_npcb") 3443 . 3457) . 
              ((DO "do" 3464 . 3466) (semantic-list "{                        \\
        (_npcb)->next = *_pcbs; \\
        *(_pcbs) = (_npcb);     \\
        TcpTimerNeeded();       \\
    }" 3467 . 3601) (WHILE "while" 3602 . 3607) (semantic-list "(0)" 3608 . 3611)))
          ("TCP_TMR_INTERVAL" . ((number "250" 2172 . 2175)))
          ("TcpEventRecv" (spp-arg-list ("_pcb" "_data" "_err" "_ret") 5574 . 5599) . 
              ((DO "do" 5636 . 5638) (semantic-list "{                                                                    \\
        if ((_pcb)->recv != NULL) {                                         \\
            (_ret) = (_pcb)->recv((_pcb)->cbArgs, (_pcb), (_data), (_err)); \\
        }                                                                   \\
    }" 5639 . 5949) (WHILE "while" 5950 . 5955) (semantic-list "(0)" 5956 . 5959)))
          ("TCP_OPT_LEN" (spp-arg-list ("_flags") 3022 . 3030) . 
              ((semantic-list "(_flags & TF_SEG_OPTS_MSS ? 4 : 0)" 3050 . 3084) (punctuation "+" 3085 . 3086) (semantic-list "(_flags & TF_SEG_OPTS_TS ? 12 : 0)" 3093 . 3127)))
          ("TcpEventPoll" (spp-arg-list ("_pcb" "_ret") 7204 . 7216) . 
              ((DO "do" 7247 . 7249) (semantic-list "{                                                 \\
        if ((_pcb->poll) != NULL) {                      \\
            _ret = (_pcb->poll)((_pcb)->cbArgs, (_pcb)); \\
        }                                                \\
    }" 7250 . 7484) (WHILE "while" 7485 . 7490) (semantic-list "(0)" 7491 . 7494)))
          ("TCP_SYN" . ((symbol "0x02U" 415 . 420)))
          ("TCPH_SET_FLAG" (spp-arg-list ("_phdr" "_flags") 1247 . 1263) . 
              ((semantic-list "(_phdr)" 1270 . 1277) (punctuation "-" 1277 . 1278) (punctuation ">" 1278 . 1279) (symbol "hdrLenRcvdFlags" 1279 . 1294) (punctuation "=" 1295 . 1296) (semantic-list "((_phdr)->hdrLenRcvdFlags | Rthtons(_flags))" 1297 . 1341)))
          ("TCP_SLOW_INTERVAL" . ((semantic-list "(2 * TCP_TMR_INTERVAL)" 2345 . 2367)))
          ("TCP_MAXIDLE" . ((semantic-list "(TCP_KEEPCNT_DEFAULT * TCP_KEEPINTVL_DEFAULT)" 2923 . 2968)))
          ("TCP_SEQ_BETWEEN" (spp-arg-list ("a" "b" "c") 3378 . 3385) . ((semantic-list "(TCP_SEQ_GEQ(a,b) && TCP_SEQ_LEQ(a,c))" 3386 . 3424)))
          ("TcpEventErr" (spp-arg-list ("_errf" "_arg" "_err") 6971 . 6990) . 
              ((DO "do" 6999 . 7001) (semantic-list "{                                 \\
        if ((_errf) != NULL) {           \\
            (_errf)((_arg), (_err));     \\
        }                                \\
    }" 7002 . 7172) (WHILE "while" 7173 . 7178) (semantic-list "(0)" 7179 . 7182)))
          ("TcpOutputNagel" (spp-arg-list ("_pcb") 8232 . 8238) . ((semantic-list "(TcpDoOutputNagel(_pcb) ? TcpOutput(_pcb) : 0)" 8245 . 8291)))
          ("TCP_PSH" . ((symbol "0x08U" 459 . 464)))
          ("TCP_FAST_INTERVAL" . ((symbol "TCP_TMR_INTERVAL" 2255 . 2271)))
          ("TCP_KEEPINTVL_DEFAULT" . ((symbol "75000UL" 2750 . 2757)))
          ("TCP_SEQ_LEQ" (spp-arg-list ("_a" "_b") 3204 . 3212) . ((semantic-list "((int32)((_a)-(_b)) <= 0)" 3216 . 3241)))
          ("TcpEventConnected" (spp-arg-list ("_pcb" "_err" "_ret") 5044 . 5062) . 
              ((DO "do" 5097 . 5099) (semantic-list "{                                                                \\
        if ((_pcb)->connected != NULL) {                                \\
            (_ret) = (_pcb)->connected((_pcb)->cbArgs, (_pcb), (_err)); \\
        } else {                                                        \\
            (_ret) = 0;                                                 \\
        }                                                               \\
    }" 5100 . 5542) (WHILE "while" 5543 . 5548) (semantic-list "(0)" 5549 . 5552)))
          ("__TCP_IMPL_H__")
          ("TCP_ACK" . ((symbol "0x10U" 481 . 486)))
          ("TCP_URG" . ((symbol "0x20U" 503 . 508)))
          ("TCPH_HDRLEN_SET" (spp-arg-list ("phdr" "len") 710 . 721) . 
              ((semantic-list "(phdr)" 722 . 728) (punctuation "-" 728 . 729) (punctuation ">" 729 . 730) (symbol "_hdrlen_rsvd_flags" 730 . 748) (punctuation "=" 749 . 750) (symbol "htons" 751 . 756) (semantic-list "(((len) << 12) | TCPH_FLAGS(phdr))" 756 . 790)))
          ("TF_SEG_OPTS_TS" . ((semantic-list "(uint8)" 1895 . 1902) (symbol "0x02U" 1902 . 1907)))
          ("TCP_SYN_RCVD_TIMEOUT" . ((number "20000" 2441 . 2446)))
          ("TCP_SEQ_GT" (spp-arg-list ("_a" "_b") 3260 . 3268) . ((semantic-list "((int32)((_a)-(_b)) > 0)" 3273 . 3297)))
          ("TcpRemPcb" (spp-arg-list ("_pcbs" "_npcb") 3630 . 3644) . 
              ((DO "do" 3651 . 3653) (semantic-list "{                                                \\
        if (*(_pcbs) == (_npcb)) {                     \\
            (*(_pcbs)) = (*_pcbs)->next;                \\
        } else {                                        \\
            for (g_tcpTmpPcbs = *_pcbs;                 \\
                 g_tcpTmpPcbs != NULL;                  \\
                 g_tcpTmpPcbs = g_tcpTmpPcbs->next)     \\
            {                                           \\
                if (g_tcpTmpPcbs->next == (_npcb)) {    \\
                    g_tcpTmpPcbs->next = (_npcb)->next; \\
                    break;                              \\
                }                                       \\
            }                                           \\
        }                                               \\
    (_npcb)->next = NULL;                               \\
    }" 3654 . 4521) (WHILE "while" 4522 . 4527) (semantic-list "(0)" 4528 . 4531)))
          ("TCP_BUILD_MSS_OPTION" (spp-arg-list ("_x") 8442 . 8446) . 
              ((semantic-list "(_x)" 8461 . 8465) (punctuation "=" 8466 . 8467) (symbol "RtPpHtonl" 8468 . 8477) (semantic-list "(((uint32)2 << 24) | \\
    ((uint32)4 << 16)                  | \\
    (((uint32)TCP_MSS / 256) << 8)     | \\
    (TCP_MSS & 255))" 8477 . 8606)))
          ("TCP_FIN" . ((symbol "0x01U" 393 . 398)))
          ("TCPH_OFFSET_SET" (spp-arg-list ("phdr" "offset") 601 . 615) . 
              ((semantic-list "(phdr)" 616 . 622) (punctuation "-" 622 . 623) (punctuation ">" 623 . 624) (symbol "_hdrlen_rsvd_flags" 624 . 642) (punctuation "=" 643 . 644) (symbol "htons" 645 . 650) (semantic-list "(((offset) << 8) | TCPH_FLAGS(phdr))" 650 . 686)))
          ("TCPH_OFFSET" (spp-arg-list ("_phdr") 811 . 818) . ((semantic-list "(Rtntohs((_phdr)->hdrLenRcvdFlags) >> 8)" 825 . 865)))
          ("TCP_TCPLEN" (spp-arg-list ("_seg") 1583 . 1589) . ((semantic-list "((_seg)->len + ((TCPH_FLAGS((_seg)->tcpHdr) & (TCP_FIN | TCP_SYN)) != 0))" 1596 . 1669)))
          ("TCP_HLEN" . ((number "20" 1758 . 1760)))
          ("TF_SEG_DATA_CHECKSUMMED" . ((semantic-list "(uint8)" 1972 . 1979) (symbol "0x04U" 1979 . 1984)))
          ("TCP_MSL" . ((symbol "60000UL" 2515 . 2522)))
          ("TcpEventAccept" (spp-arg-list ("_pcb" "_err" "_ret") 4555 . 4573) . 
              ((DO "do" 4580 . 4582) (semantic-list "{                                                             \\
        if ((_pcb)->accept != NULL) {                                \\
            (_ret) = (_pcb)->accept((_pcb)->cbArgs, (_pcb), (_err)); \\
        } else {                                                     \\
            (_ret) = 0;                                              \\
        }                                                            \\
    }" 4583 . 5007) (WHILE "while" 5008 . 5013) (semantic-list "(0)" 5014 . 5017)))
          ("TcpEventSent" (spp-arg-list ("_pcb" "_space" "_ret") 5981 . 6001) . 
              ((DO "do" 6036 . 6038) (semantic-list "{                                                             \\
        if ((_pcb)->sent != NULL) {                                   \\
            (_ret) = (_pcb)->sent((_pcb)->cbArgs, (_pcb), (_space)); \\
        } else {                                                     \\
            (_ret) = 0;                                                \\
        }                                                            \\
    }" 6039 . 6466) (WHILE "while" 6467 . 6472) (semantic-list "(0)" 6473 . 6476)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("dbgpkt.h" include nil nil [2 21])
            ("DbgEthernetHeaderDump" function
               (:arguments 
                  ( ("hdr" variable
                       (:pointer 1
                        :type ("EtherHdr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [220 234]))                  
                :type "void")
                nil [193 1013])
            ("DbgArpHeaderDump" function
               (:arguments 
                  ( ("hdr" variable
                       (:pointer 1
                        :type ("EthArpHdr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1037 1052]))                  
                :type "void")
                nil [1015 3116])
            ("DbgIpHeaderDump" function
               (:arguments 
                  ( ("hdr" variable
                       (:pointer 1
                        :type ("IpHdr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3139 3150]))                  
                :type "void")
                nil [3118 4132])
            ("TcpDebugPrintFlags" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("flags" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4165 4177]))                  
                :type "void")
                nil [4134 4800])
            ("DbgTcpHeaderDump" function
               (:arguments 
                  ( ("hdr" variable
                       (:pointer 1
                        :type ("TcpHdr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4824 4836]))                  
                :type "void")
                nil [4802 5553])
            ("DbgUdpHeaderDump" function
               (:arguments 
                  ( ("hdr" variable
                       (:pointer 1
                        :type ("UdpHdr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5577 5589]))                  
                :type "void")
                nil [5555 5962])
            ("DumpPkt" function
               (:arguments 
                  ( ("ethHdr" variable
                       (:pointer 1
                        :type ("EtherHdr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5977 5994])
                    ("data" variable
                       (:pointer 1
                        :type ("uint8" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5995 6007])
                    ("size" variable (:type ("uint32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6008 6020]))                  
                :type "void")
                nil [5964 6543]))          
      :file "dbgpkt.c"
      :pointmax 6543
      :fsize 6542
      :lastmodtime '(22652 44347 397441 98000)
      :unmatched-syntax '((symbol 182 . 184) (symbol 177 . 181) (FOR 173 . 176) (symbol 164 . 172) (symbol 160 . 163) (symbol 154 . 159) (punctuation 153 . 154) (punctuation 1010 . 1011) (semantic-list 971 . 1010) (symbol 963 . 971) (semantic-list 892 . 961) (ELSE 887 . 891) (semantic-list 817 . 886) (semantic-list 780 . 816) (IF 778 . 780) (ELSE 773 . 777) (semantic-list 703 . 772) (semantic-list 665 . 702) (IF 662 . 664) (punctuation 658 . 659) (semantic-list 483 . 658) (symbol 475 . 483) (punctuation 472 . 473) (semantic-list 297 . 472) (symbol 289 . 297) (punctuation 285 . 286) (semantic-list 246 . 285) (symbol 238 . 246) (punctuation 1010 . 1011) (close-paren 1009 . 1010) (string 972 . 1009) (open-paren 971 . 972) (symbol 963 . 971) (close-paren 960 . 961) (punctuation 957 . 958) (close-paren 956 . 957) (symbol 950 . 956) (punctuation 949 . 950) (punctuation 948 . 949) (symbol 945 . 948) (punctuation 943 . 944) (string 905 . 943) (open-paren 904 . 905) (symbol 896 . 904) (open-paren 892 . 893) (ELSE 887 . 891) (close-paren 885 . 886) (punctuation 882 . 883) (close-paren 881 . 882) (symbol 875 . 881) (punctuation 874 . 875) (punctuation 873 . 874) (symbol 870 . 873) (punctuation 868 . 869) (string 830 . 868) (open-paren 829 . 830) (symbol 821 . 829) (open-paren 817 . 818) (close-paren 815 . 816) (close-paren 814 . 815) (symbol 806 . 814) (open-paren 805 . 806) (symbol 796 . 805) (punctuation 794 . 795) (punctuation 793 . 794) (symbol 786 . 792) (punctuation 785 . 786) (punctuation 784 . 785) (symbol 781 . 784) (open-paren 780 . 781) (IF 778 . 780) (ELSE 773 . 777) (close-paren 771 . 772) (punctuation 768 . 769) (close-paren 767 . 768) (symbol 761 . 767) (punctuation 760 . 761) (punctuation 759 . 760) (symbol 756 . 759) (punctuation 754 . 755) (string 716 . 754) (open-paren 715 . 716) (symbol 707 . 715) (open-paren 703 . 704) (close-paren 701 . 702) (close-paren 700 . 701) (symbol 691 . 700) (open-paren 690 . 691) (symbol 681 . 690) (punctuation 679 . 680) (punctuation 678 . 679) (symbol 671 . 677) (punctuation 670 . 671) (punctuation 669 . 670) (symbol 666 . 669) (open-paren 665 . 666) (IF 662 . 664) (punctuation 658 . 659) (close-paren 657 . 658) (close-paren 656 . 657) (number 655 . 656) (open-paren 654 . 655) (symbol 650 . 654) (punctuation 649 . 650) (symbol 646 . 649) (punctuation 645 . 646) (punctuation 644 . 645) (symbol 641 . 644) (punctuation 639 . 640) (close-paren 638 . 639) (number 637 . 638) (open-paren 636 . 637) (symbol 632 . 636) (punctuation 631 . 632) (symbol 628 . 631) (punctuation 627 . 628) (punctuation 626 . 627) (symbol 623 . 626) (punctuation 621 . 622) (close-paren 620 . 621) (number 619 . 620) (open-paren 618 . 619) (symbol 614 . 618) (punctuation 613 . 614) (symbol 610 . 613) (punctuation 609 . 610) (punctuation 608 . 609) (symbol 605 . 608) (punctuation 601 . 602) (close-paren 600 . 601) (number 599 . 600) (open-paren 598 . 599) (symbol 594 . 598) (punctuation 593 . 594) (symbol 590 . 593) (punctuation 589 . 590) (punctuation 588 . 589) (symbol 585 . 588) (punctuation 583 . 584) (close-paren 582 . 583) (number 581 . 582) (open-paren 580 . 581) (symbol 576 . 580) (punctuation 575 . 576) (symbol 572 . 575) (punctuation 571 . 572) (punctuation 570 . 571) (symbol 567 . 570) (punctuation 565 . 566) (close-paren 564 . 565) (number 563 . 564) (open-paren 562 . 563) (symbol 558 . 562) (punctuation 557 . 558) (symbol 554 . 557) (punctuation 553 . 554) (punctuation 552 . 553) (symbol 549 . 552) (punctuation 545 . 546) (string 484 . 545) (open-paren 483 . 484) (symbol 475 . 483) (punctuation 472 . 473) (close-paren 471 . 472) (close-paren 470 . 471) (number 469 . 470) (open-paren 468 . 469) (symbol 464 . 468) (punctuation 463 . 464) (symbol 460 . 463) (punctuation 459 . 460) (punctuation 458 . 459) (symbol 455 . 458) (punctuation 453 . 454) (close-paren 452 . 453) (number 451 . 452) (open-paren 450 . 451) (symbol 446 . 450) (punctuation 445 . 446) (symbol 442 . 445) (punctuation 441 . 442) (punctuation 440 . 441) (symbol 437 . 440) (punctuation 435 . 436) (close-paren 434 . 435) (number 433 . 434) (open-paren 432 . 433) (symbol 428 . 432) (punctuation 427 . 428) (symbol 424 . 427) (punctuation 423 . 424) (punctuation 422 . 423) (symbol 419 . 422) (punctuation 415 . 416) (close-paren 414 . 415) (number 413 . 414) (open-paren 412 . 413) (symbol 408 . 412) (punctuation 407 . 408) (symbol 404 . 407) (punctuation 403 . 404) (punctuation 402 . 403) (symbol 399 . 402) (punctuation 397 . 398) (close-paren 396 . 397) (number 395 . 396) (open-paren 394 . 395) (symbol 390 . 394) (punctuation 389 . 390) (symbol 386 . 389) (punctuation 385 . 386) (punctuation 384 . 385) (symbol 381 . 384) (punctuation 379 . 380) (close-paren 378 . 379) (number 377 . 378) (open-paren 376 . 377) (symbol 372 . 376) (punctuation 371 . 372) (symbol 368 . 371) (punctuation 367 . 368) (punctuation 366 . 367) (symbol 363 . 366) (punctuation 359 . 360) (string 298 . 359) (open-paren 297 . 298) (symbol 289 . 297) (punctuation 285 . 286) (close-paren 284 . 285) (string 247 . 284) (open-paren 246 . 247) (symbol 238 . 246) (punctuation 3113 . 3114) (semantic-list 3074 . 3113) (symbol 3066 . 3074) (semantic-list 3010 . 3064) (ELSE 3005 . 3009) (semantic-list 1152 . 3004) (semantic-list 1110 . 1151) (IF 1107 . 1109) (punctuation 1103 . 1104) (semantic-list 1064 . 1103) (symbol 1056 . 1064) (punctuation 3113 . 3114) (close-paren 3112 . 3113) (string 3075 . 3112) (open-paren 3074 . 3075) (symbol 3066 . 3074) (close-paren 3063 . 3064) (punctuation 3060 . 3061) (close-paren 3059 . 3060) (symbol 3053 . 3059) (punctuation 3052 . 3053) (punctuation 3051 . 3052) (symbol 3048 . 3051) (punctuation 3046 . 3047) (string 3023 . 3046) (open-paren 3022 . 3023) (symbol 3014 . 3022) (open-paren 3010 . 3011) (ELSE 3005 . 3009) (close-paren 3003 . 3004) (punctuation 3000 . 3001) (close-paren 2999 . 3000) (string 2962 . 2999) (open-paren 2961 . 2962) (symbol 2953 . 2961) (punctuation 2949 . 2950) (close-paren 2948 . 2949) (close-paren 2947 . 2948) (number 2946 . 2947) (punctuation 2944 . 2945) (symbol 2935 . 2944) (punctuation 2934 . 2935) (punctuation 2933 . 2934) (symbol 2930 . 2933) (punctuation 2929 . 2930) (open-paren 2928 . 2929) (symbol 2918 . 2928) (punctuation 2913 . 2914) (close-paren 2912 . 2913) (number 2911 . 2912) (punctuation 2909 . 2910) (symbol 2900 . 2909) (punctuation 2899 . 2900) (punctuation 2898 . 2899) (symbol 2895 . 2898) (punctuation 2894 . 2895) (open-paren 2893 . 2894) (symbol 2883 . 2893) (punctuation 2878 . 2879) (close-paren 2877 . 2878) (number 2876 . 2877) (punctuation 2874 . 2875) (symbol 2865 . 2874) (punctuation 2864 . 2865) (punctuation 2863 . 2864) (symbol 2860 . 2863) (punctuation 2859 . 2860) (open-paren 2858 . 2859) (symbol 2848 . 2858) (punctuation 2843 . 2844) (close-paren 2842 . 2843) (number 2841 . 2842) (punctuation 2839 . 2840) (symbol 2830 . 2839) (punctuation 2829 . 2830) (punctuation 2828 . 2829) (symbol 2825 . 2828) (punctuation 2824 . 2825) (open-paren 2823 . 2824) (symbol 2813 . 2823) (punctuation 2808 . 2809) (string 2760 . 2808) (open-paren 2759 . 2760) (symbol 2751 . 2759) (punctuation 2747 . 2748) (close-paren 2746 . 2747) (string 2709 . 2746) (open-paren 2708 . 2709) (symbol 2700 . 2708) (punctuation 2696 . 2697) (close-paren 2695 . 2696) (close-paren 2694 . 2695) (number 2693 . 2694) (punctuation 2691 . 2692) (symbol 2682 . 2691) (punctuation 2681 . 2682) (punctuation 2680 . 2681) (symbol 2677 . 2680) (punctuation 2676 . 2677) (open-paren 2675 . 2676) (symbol 2665 . 2675) (punctuation 2660 . 2661) (close-paren 2659 . 2660) (number 2658 . 2659) (punctuation 2656 . 2657) (symbol 2647 . 2656) (punctuation 2646 . 2647) (punctuation 2645 . 2646) (symbol 2642 . 2645) (punctuation 2641 . 2642) (open-paren 2640 . 2641) (symbol 2630 . 2640) (punctuation 2625 . 2626) (close-paren 2624 . 2625) (number 2623 . 2624) (punctuation 2621 . 2622) (symbol 2612 . 2621) (punctuation 2611 . 2612) (punctuation 2610 . 2611) (symbol 2607 . 2610) (punctuation 2606 . 2607) (open-paren 2605 . 2606) (symbol 2595 . 2605) (punctuation 2590 . 2591) (close-paren 2589 . 2590) (number 2588 . 2589) (punctuation 2586 . 2587) (symbol 2577 . 2586) (punctuation 2576 . 2577) (punctuation 2575 . 2576) (symbol 2572 . 2575) (punctuation 2571 . 2572) (open-paren 2570 . 2571) (symbol 2560 . 2570) (punctuation 2555 . 2556) (string 2508 . 2555) (open-paren 2507 . 2508) (symbol 2499 . 2507) (punctuation 2495 . 2496) (close-paren 2494 . 2495) (string 2457 . 2494) (open-paren 2456 . 2457) (symbol 2448 . 2456) (punctuation 2443 . 2444) (close-paren 2442 . 2443) (close-paren 2438 . 2439) (number 2437 . 2438) (open-paren 2436 . 2437) (symbol 2432 . 2436) (punctuation 2431 . 2432) (symbol 2422 . 2431) (punctuation 2421 . 2422) (punctuation 2420 . 2421) (symbol 2417 . 2420) (punctuation 2416 . 2417) (close-paren 2415 . 2416) (number 2414 . 2415) (open-paren 2413 . 2414) (symbol 2409 . 2413) (punctuation 2408 . 2409) (symbol 2399 . 2408) (punctuation 2398 . 2399) (punctuation 2397 . 2398) (symbol 2394 . 2397) (punctuation 2393 . 2394) (close-paren 2392 . 2393) (number 2391 . 2392) (open-paren 2390 . 2391) (symbol 2386 . 2390) (punctuation 2385 . 2386) (symbol 2376 . 2385) (punctuation 2375 . 2376) (punctuation 2374 . 2375) (symbol 2371 . 2374) (punctuation 2366 . 2367) (close-paren 2365 . 2366) (number 2364 . 2365) (open-paren 2363 . 2364) (symbol 2359 . 2363) (punctuation 2358 . 2359) (symbol 2349 . 2358) (punctuation 2348 . 2349) (punctuation 2347 . 2348) (symbol 2344 . 2347) (punctuation 2343 . 2344) (close-paren 2342 . 2343) (number 2341 . 2342) (open-paren 2340 . 2341) (symbol 2336 . 2340) (punctuation 2335 . 2336) (symbol 2326 . 2335) (punctuation 2325 . 2326) (punctuation 2324 . 2325) (symbol 2321 . 2324) (punctuation 2320 . 2321) (close-paren 2319 . 2320) (number 2318 . 2319) (open-paren 2317 . 2318) (symbol 2313 . 2317) (punctuation 2312 . 2313) (symbol 2303 . 2312) (punctuation 2302 . 2303) (punctuation 2301 . 2302) (symbol 2298 . 2301) (punctuation 2293 . 2294) (string 2229 . 2293) (open-paren 2228 . 2229) (symbol 2220 . 2228) (punctuation 2215 . 2216) (close-paren 2214 . 2215) (close-paren 2213 . 2214) (number 2212 . 2213) (open-paren 2211 . 2212) (symbol 2207 . 2211) (punctuation 2206 . 2207) (symbol 2197 . 2206) (punctuation 2196 . 2197) (punctuation 2195 . 2196) (symbol 2192 . 2195) (punctuation 2191 . 2192) (close-paren 2190 . 2191) (number 2189 . 2190) (open-paren 2188 . 2189) (symbol 2184 . 2188) (punctuation 2183 . 2184) (symbol 2174 . 2183) (punctuation 2173 . 2174) (punctuation 2172 . 2173) (symbol 2169 . 2172) (punctuation 2168 . 2169) (close-paren 2167 . 2168) (number 2166 . 2167) (open-paren 2165 . 2166) (symbol 2161 . 2165) (punctuation 2160 . 2161) (symbol 2151 . 2160) (punctuation 2150 . 2151) (punctuation 2149 . 2150) (symbol 2146 . 2149) (punctuation 2141 . 2142) (close-paren 2140 . 2141) (number 2139 . 2140) (open-paren 2138 . 2139) (symbol 2134 . 2138) (punctuation 2133 . 2134) (symbol 2124 . 2133) (punctuation 2123 . 2124) (punctuation 2122 . 2123) (symbol 2119 . 2122) (punctuation 2118 . 2119) (close-paren 2117 . 2118) (number 2116 . 2117) (open-paren 2115 . 2116) (symbol 2111 . 2115) (punctuation 2110 . 2111) (symbol 2101 . 2110) (punctuation 2100 . 2101) (punctuation 2099 . 2100) (symbol 2096 . 2099) (punctuation 2095 . 2096) (close-paren 2094 . 2095) (number 2093 . 2094) (open-paren 2092 . 2093) (symbol 2088 . 2092) (punctuation 2087 . 2088) (symbol 2078 . 2087) (punctuation 2077 . 2078) (punctuation 2076 . 2077) (symbol 2073 . 2076) (punctuation 2068 . 2069) (string 2004 . 2068) (open-paren 2003 . 2004) (symbol 1995 . 2003) (punctuation 1991 . 1992) (close-paren 1990 . 1991) (string 1953 . 1990) (open-paren 1952 . 1953) (symbol 1944 . 1952) (close-paren 1938 . 1939) (punctuation 1934 . 1935) (close-paren 1933 . 1934) (symbol 1927 . 1933) (punctuation 1926 . 1927) (punctuation 1925 . 1926) (symbol 1922 . 1925) (punctuation 1920 . 1921) (string 1874 . 1920) (open-paren 1873 . 1874) (symbol 1865 . 1873) (open-paren 1860 . 1861) (ELSE 1855 . 1859) (close-paren 1853 . 1854) (punctuation 1849 . 1850) (close-paren 1848 . 1849) (string 1802 . 1848) (open-paren 1801 . 1802) (symbol 1793 . 1801) (open-paren 1788 . 1789) (close-paren 1787 . 1788) (close-paren 1786 . 1787) (number 1785 . 1786) (open-paren 1784 . 1785) (symbol 1777 . 1784) (punctuation 1775 . 1776) (punctuation 1774 . 1775) (symbol 1767 . 1773) (punctuation 1766 . 1767) (punctuation 1765 . 1766) (symbol 1762 . 1765) (open-paren 1761 . 1762) (IF 1758 . 1760) (ELSE 1753 . 1757) (close-paren 1751 . 1752) (punctuation 1747 . 1748) (close-paren 1746 . 1747) (string 1700 . 1746) (open-paren 1699 . 1700) (symbol 1691 . 1699) (open-paren 1686 . 1687) (close-paren 1684 . 1685) (close-paren 1683 . 1684) (number 1682 . 1683) (open-paren 1681 . 1682) (symbol 1674 . 1681) (punctuation 1672 . 1673) (punctuation 1671 . 1672) (symbol 1664 . 1670) (punctuation 1663 . 1664) (punctuation 1662 . 1663) (symbol 1659 . 1662) (open-paren 1658 . 1659) (IF 1655 . 1657) (ELSE 1650 . 1654) (close-paren 1648 . 1649) (punctuation 1644 . 1645) (close-paren 1643 . 1644) (string 1597 . 1643) (open-paren 1596 . 1597) (symbol 1588 . 1596) (open-paren 1583 . 1584) (close-paren 1581 . 1582) (close-paren 1580 . 1581) (symbol 1566 . 1580) (open-paren 1565 . 1566) (symbol 1558 . 1565) (punctuation 1556 . 1557) (punctuation 1555 . 1556) (symbol 1548 . 1554) (punctuation 1547 . 1548) (punctuation 1546 . 1547) (symbol 1543 . 1546) (open-paren 1542 . 1543) (IF 1539 . 1541) (ELSE 1534 . 1538) (close-paren 1532 . 1533) (punctuation 1528 . 1529) (close-paren 1527 . 1528) (string 1481 . 1527) (open-paren 1480 . 1481) (symbol 1472 . 1480) (open-paren 1467 . 1468) (close-paren 1465 . 1466) (close-paren 1464 . 1465) (symbol 1452 . 1464) (open-paren 1451 . 1452) (symbol 1444 . 1451) (punctuation 1442 . 1443) (punctuation 1441 . 1442) (symbol 1434 . 1440) (punctuation 1433 . 1434) (punctuation 1432 . 1433) (symbol 1429 . 1432) (open-paren 1428 . 1429) (IF 1425 . 1427) (close-paren 1420 . 1421) (punctuation 1416 . 1417) (close-paren 1415 . 1416) (symbol 1410 . 1415) (punctuation 1409 . 1410) (punctuation 1408 . 1409) (symbol 1405 . 1408) (punctuation 1403 . 1404) (string 1358 . 1403) (open-paren 1357 . 1358) (symbol 1349 . 1357) (open-paren 1344 . 1345) (ELSE 1339 . 1343) (close-paren 1337 . 1338) (punctuation 1333 . 1334) (close-paren 1332 . 1333) (string 1286 . 1332) (open-paren 1285 . 1286) (symbol 1277 . 1285) (open-paren 1272 . 1273) (close-paren 1270 . 1271) (close-paren 1269 . 1270) (symbol 1261 . 1269) (open-paren 1260 . 1261) (symbol 1253 . 1260) (punctuation 1251 . 1252) (punctuation 1250 . 1251) (symbol 1244 . 1249) (punctuation 1243 . 1244) (punctuation 1242 . 1243) (symbol 1239 . 1242) (open-paren 1238 . 1239) (IF 1235 . 1237) (punctuation 1231 . 1232) (close-paren 1230 . 1231) (string 1213 . 1230) (punctuation 1211 . 1212) (string 1165 . 1211) (open-paren 1164 . 1165) (symbol 1156 . 1164) (open-paren 1152 . 1153) (close-paren 1150 . 1151) (close-paren 1149 . 1150) (symbol 1134 . 1149) (open-paren 1133 . 1134) (symbol 1126 . 1133) (punctuation 1124 . 1125) (punctuation 1123 . 1124) (symbol 1116 . 1122) (punctuation 1115 . 1116) (punctuation 1114 . 1115) (symbol 1111 . 1114) (open-paren 1110 . 1111) (IF 1107 . 1109) (punctuation 1103 . 1104) (close-paren 1102 . 1103) (string 1065 . 1102) (open-paren 1064 . 1065) (symbol 1056 . 1064) (punctuation 4129 . 4130) (RETURN 4123 . 4129) (punctuation 4120 . 4121) (semantic-list 4081 . 4120) (symbol 4073 . 4081) (punctuation 4070 . 4071) (semantic-list 3867 . 4070) (symbol 3859 . 3867) (punctuation 3856 . 3857) (semantic-list 3817 . 3856) (symbol 3809 . 3817) (punctuation 3806 . 3807) (semantic-list 3603 . 3806) (symbol 3595 . 3603) (punctuation 3592 . 3593) (semantic-list 3553 . 3592) (symbol 3545 . 3553) (punctuation 3542 . 3543) (semantic-list 3412 . 3542) (symbol 3404 . 3412) (punctuation 3401 . 3402) (semantic-list 3362 . 3401) (symbol 3354 . 3362) (punctuation 3351 . 3352) (semantic-list 3212 . 3351) (symbol 3204 . 3212) (punctuation 3201 . 3202) (semantic-list 3162 . 3201) (symbol 3154 . 3162) (punctuation 4129 . 4130) (RETURN 4123 . 4129) (punctuation 4120 . 4121) (close-paren 4119 . 4120) (string 4082 . 4119) (open-paren 4081 . 4082) (symbol 4073 . 4081) (punctuation 4070 . 4071) (close-paren 4069 . 4070) (close-paren 4068 . 4069) (number 4067 . 4068) (open-paren 4066 . 4067) (close-paren 4065 . 4066) (symbol 4058 . 4065) (punctuation 4057 . 4058) (punctuation 4056 . 4057) (symbol 4053 . 4056) (punctuation 4052 . 4053) (close-paren 4051 . 4052) (punctuation 4050 . 4051) (symbol 4045 . 4050) (open-paren 4044 . 4045) (open-paren 4043 . 4044) (punctuation 4041 . 4042) (close-paren 4040 . 4041) (number 4039 . 4040) (open-paren 4038 . 4039) (close-paren 4037 . 4038) (symbol 4030 . 4037) (punctuation 4029 . 4030) (punctuation 4028 . 4029) (symbol 4025 . 4028) (punctuation 4024 . 4025) (close-paren 4023 . 4024) (punctuation 4022 . 4023) (symbol 4017 . 4022) (open-paren 4016 . 4017) (open-paren 4015 . 4016) (punctuation 3998 . 3999) (close-paren 3997 . 3998) (number 3996 . 3997) (open-paren 3995 . 3996) (close-paren 3994 . 3995) (symbol 3987 . 3994) (punctuation 3986 . 3987) (punctuation 3985 . 3986) (symbol 3982 . 3985) (punctuation 3981 . 3982) (close-paren 3980 . 3981) (punctuation 3979 . 3980) (symbol 3974 . 3979) (open-paren 3973 . 3974) (open-paren 3972 . 3973) (punctuation 3970 . 3971) (close-paren 3969 . 3970) (number 3968 . 3969) (open-paren 3967 . 3968) (close-paren 3966 . 3967) (symbol 3959 . 3966) (punctuation 3958 . 3959) (punctuation 3957 . 3958) (symbol 3954 . 3957) (punctuation 3953 . 3954) (close-paren 3952 . 3953) (punctuation 3951 . 3952) (symbol 3946 . 3951) (open-paren 3945 . 3946) (open-paren 3944 . 3945) (punctuation 3927 . 3928) (string 3884 . 3927) (open-paren 3867 . 3868) (symbol 3859 . 3867) (punctuation 3856 . 3857) (close-paren 3855 . 3856) (string 3818 . 3855) (open-paren 3817 . 3818) (symbol 3809 . 3817) (punctuation 3806 . 3807) (close-paren 3805 . 3806) (close-paren 3804 . 3805) (number 3803 . 3804) (open-paren 3802 . 3803) (close-paren 3801 . 3802) (symbol 3794 . 3801) (punctuation 3793 . 3794) (punctuation 3792 . 3793) (symbol 3789 . 3792) (punctuation 3788 . 3789) (close-paren 3787 . 3788) (punctuation 3786 . 3787) (symbol 3781 . 3786) (open-paren 3780 . 3781) (open-paren 3779 . 3780) (punctuation 3777 . 3778) (close-paren 3776 . 3777) (number 3775 . 3776) (open-paren 3774 . 3775) (close-paren 3773 . 3774) (symbol 3766 . 3773) (punctuation 3765 . 3766) (punctuation 3764 . 3765) (symbol 3761 . 3764) (punctuation 3760 . 3761) (close-paren 3759 . 3760) (punctuation 3758 . 3759) (symbol 3753 . 3758) (open-paren 3752 . 3753) (open-paren 3751 . 3752) (punctuation 3734 . 3735) (close-paren 3733 . 3734) (number 3732 . 3733) (open-paren 3731 . 3732) (close-paren 3730 . 3731) (symbol 3723 . 3730) (punctuation 3722 . 3723) (punctuation 3721 . 3722) (symbol 3718 . 3721) (punctuation 3717 . 3718) (close-paren 3716 . 3717) (punctuation 3715 . 3716) (symbol 3710 . 3715) (open-paren 3709 . 3710) (open-paren 3708 . 3709) (punctuation 3706 . 3707) (close-paren 3705 . 3706) (number 3704 . 3705) (open-paren 3703 . 3704) (close-paren 3702 . 3703) (symbol 3695 . 3702) (punctuation 3694 . 3695) (punctuation 3693 . 3694) (symbol 3690 . 3693) (punctuation 3689 . 3690) (close-paren 3688 . 3689) (punctuation 3687 . 3688) (symbol 3682 . 3687) (open-paren 3681 . 3682) (open-paren 3680 . 3681) (punctuation 3663 . 3664) (string 3620 . 3663) (open-paren 3603 . 3604) (symbol 3595 . 3603) (punctuation 3592 . 3593) (close-paren 3591 . 3592) (string 3554 . 3591) (open-paren 3553 . 3554) (symbol 3545 . 3553) (punctuation 3542 . 3543) (close-paren 3541 . 3542) (symbol 3533 . 3541) (punctuation 3532 . 3533) (punctuation 3531 . 3532) (symbol 3528 . 3531) (punctuation 3526 . 3527) (symbol 3518 . 3526) (punctuation 3517 . 3518) (punctuation 3516 . 3517) (symbol 3513 . 3516) (punctuation 3511 . 3512) (symbol 3508 . 3511) (punctuation 3507 . 3508) (punctuation 3506 . 3507) (symbol 3503 . 3506) (punctuation 3486 . 3487) (string 3429 . 3486) (open-paren 3412 . 3413) (symbol 3404 . 3412) (punctuation 3401 . 3402) (close-paren 3400 . 3401) (string 3363 . 3400) (open-paren 3362 . 3363) (symbol 3354 . 3362) (punctuation 3351 . 3352) (close-paren 3350 . 3351) (symbol 3342 . 3350) (punctuation 3341 . 3342) (punctuation 3340 . 3341) (symbol 3337 . 3340) (punctuation 3335 . 3336) (symbol 3332 . 3335) (punctuation 3331 . 3332) (punctuation 3330 . 3331) (symbol 3327 . 3330) (punctuation 3325 . 3326) (symbol 3322 . 3325) (punctuation 3321 . 3322) (punctuation 3320 . 3321) (symbol 3317 . 3320) (punctuation 3315 . 3316) (symbol 3308 . 3315) (punctuation 3307 . 3308) (punctuation 3306 . 3307) (symbol 3303 . 3306) (punctuation 3286 . 3287) (string 3229 . 3286) (open-paren 3212 . 3213) (symbol 3204 . 3212) (punctuation 3201 . 3202) (close-paren 3200 . 3201) (string 3163 . 3200) (open-paren 3162 . 3163) (symbol 3154 . 3162) (punctuation 4797 . 4798) (close-paren 4796 . 4797) (symbol 4791 . 4796) (punctuation 4789 . 4790) (symbol 4786 . 4789) (punctuation 4784 . 4785) (string 4758 . 4784) (open-paren 4757 . 4758) (symbol 4749 . 4757) (close-paren 4745 . 4746) (punctuation 4742 . 4743) (semantic-list 4716 . 4742) (symbol 4708 . 4716) (open-paren 4704 . 4705) (close-paren 4702 . 4703) (symbol 4695 . 4702) (punctuation 4693 . 4694) (symbol 4687 . 4692) (open-paren 4686 . 4687) (IF 4683 . 4685) (close-paren 4680 . 4681) (punctuation 4677 . 4678) (semantic-list 4651 . 4677) (symbol 4643 . 4651) (open-paren 4639 . 4640) (close-paren 4637 . 4638) (symbol 4630 . 4637) (punctuation 4628 . 4629) (symbol 4622 . 4627) (open-paren 4621 . 4622) (IF 4618 . 4620) (close-paren 4615 . 4616) (punctuation 4612 . 4613) (semantic-list 4586 . 4612) (symbol 4578 . 4586) (open-paren 4574 . 4575) (close-paren 4572 . 4573) (symbol 4565 . 4572) (punctuation 4563 . 4564) (symbol 4557 . 4562) (open-paren 4556 . 4557) (IF 4553 . 4555) (close-paren 4550 . 4551) (punctuation 4547 . 4548) (semantic-list 4521 . 4547) (symbol 4513 . 4521) (open-paren 4509 . 4510) (close-paren 4507 . 4508) (symbol 4500 . 4507) (punctuation 4498 . 4499) (symbol 4492 . 4497) (open-paren 4491 . 4492) (IF 4488 . 4490) (close-paren 4485 . 4486) (punctuation 4482 . 4483) (semantic-list 4456 . 4482) (symbol 4448 . 4456) (open-paren 4444 . 4445) (close-paren 4442 . 4443) (symbol 4435 . 4442) (punctuation 4433 . 4434) (symbol 4427 . 4432) (open-paren 4426 . 4427) (IF 4423 . 4425) (close-paren 4420 . 4421) (punctuation 4417 . 4418) (semantic-list 4391 . 4417) (symbol 4383 . 4391) (open-paren 4379 . 4380) (close-paren 4377 . 4378) (symbol 4370 . 4377) (punctuation 4368 . 4369) (symbol 4362 . 4367) (open-paren 4361 . 4362) (IF 4358 . 4360) (close-paren 4355 . 4356) (punctuation 4352 . 4353) (semantic-list 4326 . 4352) (symbol 4318 . 4326) (open-paren 4314 . 4315) (close-paren 4312 . 4313) (symbol 4305 . 4312) (punctuation 4303 . 4304) (symbol 4297 . 4302) (open-paren 4296 . 4297) (IF 4293 . 4295) (close-paren 4290 . 4291) (punctuation 4287 . 4288) (semantic-list 4261 . 4287) (symbol 4253 . 4261) (open-paren 4249 . 4250) (close-paren 4247 . 4248) (symbol 4240 . 4247) (punctuation 4238 . 4239) (symbol 4232 . 4237) (open-paren 4231 . 4232) (IF 4228 . 4230) (punctuation 4224 . 4225) (close-paren 4223 . 4224) (semantic-list 4218 . 4223) (SIZEOF 4212 . 4218) (punctuation 4210 . 4211) (number 4209 . 4210) (punctuation 4207 . 4208) (symbol 4204 . 4207) (open-paren 4203 . 4204) (symbol 4197 . 4203) (punctuation 4193 . 4194) (close-paren 4192 . 4193) (number 4190 . 4192) (open-paren 4189 . 4190) (symbol 4186 . 4189) (CHAR 4181 . 4185) (punctuation 4797 . 4798) (semantic-list 4757 . 4797) (symbol 4749 . 4757) (semantic-list 4704 . 4746) (semantic-list 4686 . 4703) (IF 4683 . 4685) (semantic-list 4639 . 4681) (semantic-list 4621 . 4638) (IF 4618 . 4620) (semantic-list 4574 . 4616) (semantic-list 4556 . 4573) (IF 4553 . 4555) (semantic-list 4509 . 4551) (semantic-list 4491 . 4508) (IF 4488 . 4490) (semantic-list 4444 . 4486) (semantic-list 4426 . 4443) (IF 4423 . 4425) (semantic-list 4379 . 4421) (semantic-list 4361 . 4378) (IF 4358 . 4360) (semantic-list 4314 . 4356) (semantic-list 4296 . 4313) (IF 4293 . 4295) (semantic-list 4249 . 4291) (semantic-list 4231 . 4248) (IF 4228 . 4230) (punctuation 4224 . 4225) (semantic-list 4203 . 4224) (symbol 4197 . 4203) (punctuation 4797 . 4798) (close-paren 4796 . 4797) (symbol 4791 . 4796) (punctuation 4789 . 4790) (symbol 4786 . 4789) (punctuation 4784 . 4785) (string 4758 . 4784) (open-paren 4757 . 4758) (symbol 4749 . 4757) (close-paren 4745 . 4746) (punctuation 4742 . 4743) (close-paren 4741 . 4742) (string 4735 . 4741) (punctuation 4733 . 4734) (close-paren 4732 . 4733) (symbol 4729 . 4732) (open-paren 4728 . 4729) (SIZEOF 4722 . 4728) (punctuation 4720 . 4721) (symbol 4717 . 4720) (open-paren 4716 . 4717) (symbol 4708 . 4716) (open-paren 4704 . 4705) (close-paren 4702 . 4703) (symbol 4695 . 4702) (punctuation 4693 . 4694) (symbol 4687 . 4692) (open-paren 4686 . 4687) (IF 4683 . 4685) (close-paren 4680 . 4681) (punctuation 4677 . 4678) (close-paren 4676 . 4677) (string 4670 . 4676) (punctuation 4668 . 4669) (close-paren 4667 . 4668) (symbol 4664 . 4667) (open-paren 4663 . 4664) (SIZEOF 4657 . 4663) (punctuation 4655 . 4656) (symbol 4652 . 4655) (open-paren 4651 . 4652) (symbol 4643 . 4651) (open-paren 4639 . 4640) (close-paren 4637 . 4638) (symbol 4630 . 4637) (punctuation 4628 . 4629) (symbol 4622 . 4627) (open-paren 4621 . 4622) (IF 4618 . 4620) (close-paren 4615 . 4616) (punctuation 4612 . 4613) (close-paren 4611 . 4612) (string 4605 . 4611) (punctuation 4603 . 4604) (close-paren 4602 . 4603) (symbol 4599 . 4602) (open-paren 4598 . 4599) (SIZEOF 4592 . 4598) (punctuation 4590 . 4591) (symbol 4587 . 4590) (open-paren 4586 . 4587) (symbol 4578 . 4586) (open-paren 4574 . 4575) (close-paren 4572 . 4573) (symbol 4565 . 4572) (punctuation 4563 . 4564) (symbol 4557 . 4562) (open-paren 4556 . 4557) (IF 4553 . 4555) (close-paren 4550 . 4551) (punctuation 4547 . 4548) (close-paren 4546 . 4547) (string 4540 . 4546) (punctuation 4538 . 4539) (close-paren 4537 . 4538) (symbol 4534 . 4537) (open-paren 4533 . 4534) (SIZEOF 4527 . 4533) (punctuation 4525 . 4526) (symbol 4522 . 4525) (open-paren 4521 . 4522) (symbol 4513 . 4521) (open-paren 4509 . 4510) (close-paren 4507 . 4508) (symbol 4500 . 4507) (punctuation 4498 . 4499) (symbol 4492 . 4497) (open-paren 4491 . 4492) (IF 4488 . 4490) (close-paren 4485 . 4486) (punctuation 4482 . 4483) (close-paren 4481 . 4482) (string 4475 . 4481) (punctuation 4473 . 4474) (close-paren 4472 . 4473) (symbol 4469 . 4472) (open-paren 4468 . 4469) (SIZEOF 4462 . 4468) (punctuation 4460 . 4461) (symbol 4457 . 4460) (open-paren 4456 . 4457) (symbol 4448 . 4456) (open-paren 4444 . 4445) (close-paren 4442 . 4443) (symbol 4435 . 4442) (punctuation 4433 . 4434) (symbol 4427 . 4432) (open-paren 4426 . 4427) (IF 4423 . 4425) (close-paren 4420 . 4421) (punctuation 4417 . 4418) (close-paren 4416 . 4417) (string 4410 . 4416) (punctuation 4408 . 4409) (close-paren 4407 . 4408) (symbol 4404 . 4407) (open-paren 4403 . 4404) (SIZEOF 4397 . 4403) (punctuation 4395 . 4396) (symbol 4392 . 4395) (open-paren 4391 . 4392) (symbol 4383 . 4391) (open-paren 4379 . 4380) (close-paren 4377 . 4378) (symbol 4370 . 4377) (punctuation 4368 . 4369) (symbol 4362 . 4367) (open-paren 4361 . 4362) (IF 4358 . 4360) (close-paren 4355 . 4356) (punctuation 4352 . 4353) (close-paren 4351 . 4352) (string 4345 . 4351) (punctuation 4343 . 4344) (close-paren 4342 . 4343) (symbol 4339 . 4342) (open-paren 4338 . 4339) (SIZEOF 4332 . 4338) (punctuation 4330 . 4331) (symbol 4327 . 4330) (open-paren 4326 . 4327) (symbol 4318 . 4326) (open-paren 4314 . 4315) (close-paren 4312 . 4313) (symbol 4305 . 4312) (punctuation 4303 . 4304) (symbol 4297 . 4302) (open-paren 4296 . 4297) (IF 4293 . 4295) (close-paren 4290 . 4291) (punctuation 4287 . 4288) (close-paren 4286 . 4287) (string 4280 . 4286) (punctuation 4278 . 4279) (close-paren 4277 . 4278) (symbol 4274 . 4277) (open-paren 4273 . 4274) (SIZEOF 4267 . 4273) (punctuation 4265 . 4266) (symbol 4262 . 4265) (open-paren 4261 . 4262) (symbol 4253 . 4261) (open-paren 4249 . 4250) (close-paren 4247 . 4248) (symbol 4240 . 4247) (punctuation 4238 . 4239) (symbol 4232 . 4237) (open-paren 4231 . 4232) (IF 4228 . 4230) (punctuation 4224 . 4225) (close-paren 4223 . 4224) (close-paren 4222 . 4223) (symbol 4219 . 4222) (open-paren 4218 . 4219) (SIZEOF 4212 . 4218) (punctuation 4210 . 4211) (number 4209 . 4210) (punctuation 4207 . 4208) (symbol 4204 . 4207) (open-paren 4203 . 4204) (symbol 4197 . 4203) (punctuation 4193 . 4194) (close-paren 4192 . 4193) (number 4190 . 4192) (open-paren 4189 . 4190) (symbol 4186 . 4189) (CHAR 4181 . 4185) (punctuation 5550 . 5551) (semantic-list 5511 . 5550) (symbol 5503 . 5511) (punctuation 5500 . 5501) (semantic-list 5402 . 5500) (symbol 5394 . 5402) (punctuation 5391 . 5392) (semantic-list 5352 . 5391) (symbol 5344 . 5352) (punctuation 5341 . 5342) (semantic-list 5324 . 5341) (symbol 5306 . 5324) (punctuation 5303 . 5304) (semantic-list 5264 . 5303) (symbol 5256 . 5264) (punctuation 5253 . 5254) (semantic-list 5186 . 5253) (symbol 5178 . 5186) (punctuation 5175 . 5176) (semantic-list 5136 . 5175) (symbol 5128 . 5136) (punctuation 5125 . 5126) (semantic-list 5058 . 5125) (symbol 5050 . 5058) (punctuation 5047 . 5048) (semantic-list 5008 . 5047) (symbol 5000 . 5008) (punctuation 4997 . 4998) (semantic-list 4898 . 4997) (symbol 4890 . 4898) (punctuation 4887 . 4888) (semantic-list 4848 . 4887) (symbol 4840 . 4848) (punctuation 5550 . 5551) (close-paren 5549 . 5550) (string 5512 . 5549) (open-paren 5511 . 5512) (symbol 5503 . 5511) (punctuation 5500 . 5501) (close-paren 5499 . 5500) (close-paren 5498 . 5499) (symbol 5494 . 5498) (punctuation 5493 . 5494) (punctuation 5492 . 5493) (symbol 5489 . 5492) (open-paren 5488 . 5489) (symbol 5481 . 5488) (punctuation 5479 . 5480) (close-paren 5478 . 5479) (symbol 5472 . 5478) (punctuation 5471 . 5472) (punctuation 5470 . 5471) (symbol 5467 . 5470) (open-paren 5466 . 5467) (symbol 5459 . 5466) (punctuation 5455 . 5456) (string 5403 . 5455) (open-paren 5402 . 5403) (symbol 5394 . 5402) (punctuation 5391 . 5392) (close-paren 5390 . 5391) (string 5353 . 5390) (open-paren 5352 . 5353) (symbol 5344 . 5352) (punctuation 5341 . 5342) (close-paren 5340 . 5341) (close-paren 5339 . 5340) (symbol 5336 . 5339) (open-paren 5335 . 5336) (symbol 5325 . 5335) (open-paren 5324 . 5325) (symbol 5306 . 5324) (punctuation 5303 . 5304) (close-paren 5302 . 5303) (string 5265 . 5302) (open-paren 5264 . 5265) (symbol 5256 . 5264) (punctuation 5253 . 5254) (close-paren 5252 . 5253) (close-paren 5251 . 5252) (symbol 5246 . 5251) (punctuation 5245 . 5246) (punctuation 5244 . 5245) (symbol 5241 . 5244) (open-paren 5240 . 5241) (symbol 5233 . 5240) (punctuation 5229 . 5230) (string 5187 . 5229) (open-paren 5186 . 5187) (symbol 5178 . 5186) (punctuation 5175 . 5176) (close-paren 5174 . 5175) (string 5137 . 5174) (open-paren 5136 . 5137) (symbol 5128 . 5136) (punctuation 5125 . 5126) (close-paren 5124 . 5125) (close-paren 5123 . 5124) (symbol 5118 . 5123) (punctuation 5117 . 5118) (punctuation 5116 . 5117) (symbol 5113 . 5116) (open-paren 5112 . 5113) (symbol 5105 . 5112) (punctuation 5101 . 5102) (string 5059 . 5101) (open-paren 5058 . 5059) (symbol 5050 . 5058) (punctuation 5047 . 5048) (close-paren 5046 . 5047) (string 5009 . 5046) (open-paren 5008 . 5009) (symbol 5000 . 5008) (punctuation 4997 . 4998) (close-paren 4996 . 4997) (close-paren 4995 . 4996) (symbol 4992 . 4995) (punctuation 4991 . 4992) (punctuation 4990 . 4991) (symbol 4987 . 4990) (open-paren 4986 . 4987) (symbol 4979 . 4986) (punctuation 4977 . 4978) (close-paren 4976 . 4977) (symbol 4973 . 4976) (punctuation 4972 . 4973) (punctuation 4971 . 4972) (symbol 4968 . 4971) (open-paren 4967 . 4968) (symbol 4960 . 4967) (punctuation 4956 . 4957) (string 4899 . 4956) (open-paren 4898 . 4899) (symbol 4890 . 4898) (punctuation 4887 . 4888) (close-paren 4886 . 4887) (string 4849 . 4886) (open-paren 4848 . 4849) (symbol 4840 . 4848) (punctuation 5959 . 5960) (semantic-list 5920 . 5959) (symbol 5912 . 5920) (punctuation 5909 . 5910) (semantic-list 5811 . 5909) (symbol 5803 . 5811) (punctuation 5800 . 5801) (semantic-list 5761 . 5800) (symbol 5753 . 5761) (punctuation 5750 . 5751) (semantic-list 5651 . 5750) (symbol 5643 . 5651) (punctuation 5640 . 5641) (semantic-list 5601 . 5640) (symbol 5593 . 5601) (punctuation 5959 . 5960) (close-paren 5958 . 5959) (string 5921 . 5958) (open-paren 5920 . 5921) (symbol 5912 . 5920) (punctuation 5909 . 5910) (close-paren 5908 . 5909) (close-paren 5907 . 5908) (symbol 5899 . 5907) (punctuation 5898 . 5899) (punctuation 5897 . 5898) (symbol 5894 . 5897) (open-paren 5893 . 5894) (symbol 5886 . 5893) (punctuation 5884 . 5885) (close-paren 5883 . 5884) (symbol 5880 . 5883) (punctuation 5879 . 5880) (punctuation 5878 . 5879) (symbol 5875 . 5878) (open-paren 5874 . 5875) (symbol 5867 . 5874) (punctuation 5863 . 5864) (string 5812 . 5863) (open-paren 5811 . 5812) (symbol 5803 . 5811) (punctuation 5800 . 5801) (close-paren 5799 . 5800) (string 5762 . 5799) (open-paren 5761 . 5762) (symbol 5753 . 5761) (punctuation 5750 . 5751) (close-paren 5749 . 5750) (close-paren 5748 . 5749) (symbol 5745 . 5748) (punctuation 5744 . 5745) (punctuation 5743 . 5744) (symbol 5740 . 5743) (open-paren 5739 . 5740) (symbol 5732 . 5739) (punctuation 5730 . 5731) (close-paren 5729 . 5730) (symbol 5726 . 5729) (punctuation 5725 . 5726) (punctuation 5724 . 5725) (symbol 5721 . 5724) (open-paren 5720 . 5721) (symbol 5713 . 5720) (punctuation 5709 . 5710) (string 5652 . 5709) (open-paren 5651 . 5652) (symbol 5643 . 5651) (punctuation 5640 . 5641) (close-paren 5639 . 5640) (string 5602 . 5639) (open-paren 5601 . 5602) (symbol 5593 . 5601) (semantic-list 6192 . 6541) (semantic-list 6152 . 6191) (IF 6150 . 6152) (ELSE 6145 . 6149) (semantic-list 6102 . 6144) (semantic-list 6061 . 6101) (IF 6058 . 6060) (punctuation 6053 . 6054) (semantic-list 6045 . 6053) (symbol 6024 . 6045) (close-paren 6540 . 6541) (close-paren 6537 . 6538) (punctuation 6533 . 6534) (close-paren 6532 . 6533) (symbol 6526 . 6532) (open-paren 6525 . 6526) (symbol 6509 . 6525) (punctuation 6503 . 6504) (close-paren 6502 . 6503) (symbol 6494 . 6502) (punctuation 6492 . 6493) (symbol 6487 . 6491) (open-paren 6486 . 6487) (close-paren 6485 . 6486) (punctuation 6484 . 6485) (symbol 6478 . 6484) (open-paren 6477 . 6478) (punctuation 6475 . 6476) (symbol 6468 . 6474) (punctuation 6466 . 6467) (symbol 6460 . 6466) (open-paren 6455 . 6456) (close-paren 6453 . 6454) (symbol 6441 . 6453) (punctuation 6439 . 6440) (punctuation 6438 . 6439) (symbol 6429 . 6437) (punctuation 6428 . 6429) (punctuation 6427 . 6428) (symbol 6422 . 6427) (open-paren 6421 . 6422) (IF 6418 . 6420) (ELSE 6413 . 6417) (close-paren 6411 . 6412) (punctuation 6407 . 6408) (close-paren 6406 . 6407) (symbol 6400 . 6406) (open-paren 6399 . 6400) (symbol 6383 . 6399) (punctuation 6377 . 6378) (close-paren 6376 . 6377) (symbol 6368 . 6376) (punctuation 6366 . 6367) (symbol 6361 . 6365) (open-paren 6360 . 6361) (close-paren 6359 . 6360) (punctuation 6358 . 6359) (symbol 6352 . 6358) (open-paren 6351 . 6352) (punctuation 6349 . 6350) (symbol 6342 . 6348) (punctuation 6340 . 6341) (symbol 6334 . 6340) (open-paren 6329 . 6330) (close-paren 6327 . 6328) (symbol 6315 . 6327) (punctuation 6313 . 6314) (punctuation 6312 . 6313) (symbol 6303 . 6311) (punctuation 6302 . 6303) (punctuation 6301 . 6302) (symbol 6296 . 6301) (open-paren 6295 . 6296) (IF 6292 . 6294) (punctuation 6287 . 6288) (close-paren 6286 . 6287) (symbol 6281 . 6286) (open-paren 6280 . 6281) (symbol 6265 . 6280) (punctuation 6260 . 6261) (number 6259 . 6260) (punctuation 6257 . 6258) (punctuation 6256 . 6257) (symbol 6252 . 6255) (punctuation 6251 . 6252) (punctuation 6250 . 6251) (symbol 6245 . 6250) (punctuation 6243 . 6244) (symbol 6234 . 6242) (symbol 6227 . 6233) (punctuation 6223 . 6224) (symbol 6219 . 6223) (close-paren 6218 . 6219) (punctuation 6217 . 6218) (symbol 6212 . 6217) (open-paren 6211 . 6212) (punctuation 6209 . 6210) (symbol 6203 . 6208) (punctuation 6201 . 6202) (symbol 6196 . 6201) (open-paren 6192 . 6193) (close-paren 6190 . 6191) (close-paren 6189 . 6190) (symbol 6181 . 6189) (open-paren 6180 . 6181) (symbol 6171 . 6180) (punctuation 6169 . 6170) (punctuation 6168 . 6169) (symbol 6161 . 6167) (punctuation 6160 . 6161) (punctuation 6159 . 6160) (symbol 6153 . 6159) (open-paren 6152 . 6153) (IF 6150 . 6152) (ELSE 6145 . 6149) (close-paren 6143 . 6144) (punctuation 6140 . 6141) (close-paren 6139 . 6140) (symbol 6135 . 6139) (close-paren 6134 . 6135) (punctuation 6133 . 6134) (symbol 6124 . 6133) (open-paren 6123 . 6124) (open-paren 6122 . 6123) (symbol 6106 . 6122) (open-paren 6102 . 6103) (close-paren 6100 . 6101) (close-paren 6099 . 6100) (symbol 6090 . 6099) (open-paren 6089 . 6090) (symbol 6080 . 6089) (punctuation 6078 . 6079) (punctuation 6077 . 6078) (symbol 6070 . 6076) (punctuation 6069 . 6070) (punctuation 6068 . 6069) (symbol 6062 . 6068) (open-paren 6061 . 6062) (IF 6058 . 6060) (punctuation 6053 . 6054) (close-paren 6052 . 6053) (symbol 6046 . 6052) (open-paren 6045 . 6046) (symbol 6024 . 6045)))
    (semanticdb-table "semanticdb-table"
      :file "dbgpkt.h"
      :fsize 375
      :lastmodtime '(22652 44347 397441 98000))
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [88 96])
            ("RKNETLIB_TCPIP" variable (:constant-flag t) nil [105 119])
            ("RKNETLIB_TCPIP_NETBUF" variable (:constant-flag t) nil [128 149])
            ("rtlib/rtlib.h" include (:system-flag t) nil [151 175])
            ("rknet/rknetlib.h" include (:system-flag t) nil [176 203])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [204 234])
            ("NetbufCreateWithPbuf" function
               (:pointer 1
                :arguments 
                  ( ("p" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [265 273]))                  
                :type ("Netbuf" type (:type "class") nil nil))
                nil [236 458])
            ("NetbufRefData" function
               (:arguments 
                  ( ("nb" variable
                       (:pointer 1
                        :type ("Netbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [480 491])
                    ("data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [492 503])
                    ("size" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [504 516]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [460 739])
            ("NetbufDeinit" function
               (:arguments 
                  ( ("nb" variable
                       (:pointer 1
                        :type ("Netbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [759 770]))                  
                :type "void")
                nil [741 796])
            ("NetbufDestroy" function
               (:arguments 
                  ( ("nb" variable
                       (:pointer 1
                        :type ("Netbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [817 828]))                  
                :type "void")
                nil [798 922]))          
      :file "netbuf.c"
      :pointmax 923
      :fsize 952
      :lastmodtime '(22665 45721 731693 842000)
      :unmatched-syntax '((punctuation 455 . 456) (semantic-list 445 . 455) (symbol 435 . 445) (RETURN 428 . 434) (semantic-list 351 . 425) (semantic-list 337 . 350) (IF 334 . 336) (punctuation 331 . 332) (semantic-list 317 . 331) (symbol 304 . 317) (punctuation 302 . 303) (symbol 298 . 301) (punctuation 455 . 456) (close-paren 454 . 455) (symbol 447 . 454) (punctuation 446 . 447) (open-paren 445 . 446) (symbol 435 . 445) (RETURN 428 . 434) (close-paren 424 . 425) (punctuation 421 . 422) (symbol 418 . 421) (RETURN 411 . 417) (punctuation 407 . 408) (number 406 . 407) (punctuation 404 . 405) (symbol 399 . 403) (punctuation 398 . 399) (punctuation 397 . 398) (symbol 394 . 397) (punctuation 390 . 391) (number 389 . 390) (punctuation 387 . 388) (symbol 382 . 386) (punctuation 381 . 382) (symbol 377 . 381) (punctuation 376 . 377) (punctuation 375 . 376) (symbol 372 . 375) (punctuation 368 . 369) (symbol 367 . 368) (punctuation 365 . 366) (symbol 360 . 364) (punctuation 359 . 360) (punctuation 358 . 359) (symbol 355 . 358) (open-paren 351 . 352) (close-paren 349 . 350) (symbol 345 . 349) (punctuation 343 . 344) (punctuation 342 . 343) (symbol 338 . 341) (open-paren 337 . 338) (IF 334 . 336) (punctuation 331 . 332) (close-paren 330 . 331) (close-paren 329 . 330) (symbol 326 . 329) (punctuation 325 . 326) (open-paren 324 . 325) (SIZEOF 318 . 324) (open-paren 317 . 318) (symbol 304 . 317) (punctuation 302 . 303) (symbol 298 . 301) (punctuation 736 . 737) (number 735 . 736) (RETURN 728 . 734) (punctuation 725 . 726) (semantic-list 694 . 725) (symbol 688 . 694) (semantic-list 650 . 685) (semantic-list 627 . 649) (IF 624 . 626) (punctuation 621 . 622) (semantic-list 593 . 621) (symbol 583 . 593) (punctuation 581 . 582) (symbol 576 . 580) (punctuation 575 . 576) (punctuation 574 . 575) (symbol 572 . 574) (semantic-list 542 . 569) (semantic-list 523 . 541) (IF 520 . 522) (punctuation 736 . 737) (number 735 . 736) (RETURN 728 . 734) (punctuation 725 . 726) (close-paren 724 . 725) (symbol 720 . 724) (punctuation 718 . 719) (symbol 714 . 718) (punctuation 712 . 713) (symbol 705 . 712) (punctuation 704 . 705) (punctuation 703 . 704) (symbol 699 . 703) (punctuation 698 . 699) (punctuation 697 . 698) (symbol 695 . 697) (open-paren 694 . 695) (symbol 688 . 694) (close-paren 684 . 685) (punctuation 681 . 682) (close-paren 680 . 681) (symbol 676 . 680) (punctuation 675 . 676) (punctuation 674 . 675) (symbol 672 . 674) (open-paren 671 . 672) (symbol 661 . 671) (RETURN 654 . 660) (open-paren 650 . 651) (close-paren 648 . 649) (close-paren 647 . 648) (symbol 643 . 647) (punctuation 642 . 643) (punctuation 641 . 642) (symbol 639 . 641) (open-paren 638 . 639) (symbol 628 . 638) (open-paren 627 . 628) (IF 624 . 626) (punctuation 621 . 622) (close-paren 620 . 621) (symbol 616 . 620) (punctuation 614 . 615) (symbol 600 . 614) (punctuation 598 . 599) (symbol 594 . 598) (open-paren 593 . 594) (symbol 583 . 593) (punctuation 581 . 582) (symbol 576 . 580) (punctuation 575 . 576) (punctuation 574 . 575) (symbol 572 . 574) (close-paren 568 . 569) (punctuation 565 . 566) (close-paren 564 . 565) (symbol 560 . 564) (punctuation 559 . 560) (punctuation 558 . 559) (symbol 556 . 558) (open-paren 555 . 556) (symbol 546 . 555) (open-paren 542 . 543) (close-paren 540 . 541) (symbol 536 . 540) (punctuation 534 . 535) (punctuation 533 . 534) (symbol 528 . 532) (punctuation 527 . 528) (punctuation 526 . 527) (symbol 524 . 526) (open-paren 523 . 524) (IF 520 . 522) (punctuation 793 . 794) (semantic-list 783 . 793) (symbol 774 . 783) (punctuation 793 . 794) (close-paren 792 . 793) (symbol 788 . 792) (punctuation 787 . 788) (punctuation 786 . 787) (symbol 784 . 786) (open-paren 783 . 784) (symbol 774 . 783) (punctuation 919 . 920) (semantic-list 915 . 919) (symbol 903 . 915) (semantic-list 854 . 900) (semantic-list 835 . 853) (IF 832 . 834) (punctuation 919 . 920) (close-paren 918 . 919) (symbol 916 . 918) (open-paren 915 . 916) (symbol 903 . 915) (close-paren 899 . 900) (punctuation 896 . 897) (symbol 892 . 896) (punctuation 890 . 891) (symbol 885 . 889) (punctuation 884 . 885) (punctuation 883 . 884) (symbol 881 . 883) (punctuation 877 . 878) (close-paren 876 . 877) (symbol 872 . 876) (punctuation 871 . 872) (punctuation 870 . 871) (symbol 868 . 870) (open-paren 867 . 868) (symbol 858 . 867) (open-paren 854 . 855) (close-paren 852 . 853) (symbol 848 . 852) (punctuation 846 . 847) (punctuation 845 . 846) (symbol 840 . 844) (punctuation 839 . 840) (punctuation 838 . 839) (symbol 836 . 838) (open-paren 835 . 836) (IF 832 . 834))
      :lexical-table 
        '(("RKNETLIB_TCPIP")
          ("RKNETLIB_TCPIP_NETBUF")
          ("RKNETLIB")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("RKNETLIB" variable (:constant-flag t) nil [98 106])
            ("RKNETLIB_TCPIP" variable (:constant-flag t) nil [115 129])
            ("rtlib/rtlib.h" include (:system-flag t) nil [131 155])
            ("rknet/rknetlib.h" include (:system-flag t) nil [156 183])
            ("rknet/tcpip/tcpip.h" include (:system-flag t) nil [184 214])
            ("g_tcpipThread" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("RtThread" type (:type "class") nil nil))
                nil [216 254])
            ("g_logger" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type ("RtLogger" type (:type "class") nil nil))
                nil [255 288])
            ("g_threadStop" variable
               (:typemodifiers ("static")
                :default-value "FALSE"
                :type ("boolean" type (:type "class") nil nil))
                nil [289 327])
            ("g_tcpIpMsgBox" variable
               (:typemodifiers ("static")
                :type ("MsgBox" type (:type "class") nil nil))
                nil [328 359])
            ("TcpipThread" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("thread" variable
                       (:pointer 1
                        :type ("RtThread" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [622 639])
                    ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [640 650]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [597 2017])
            ("TcpipInitIntern" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("initSignal" variable
                       (:pointer 1
                        :type ("RtEvent" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2048 2068]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [2019 2875])
            ("RknetTcpipGetLogger" function
               (:pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2907 2912]))                  
                :type ("RtLogger" type (:type "class") nil nil))
                nil [2877 2934])
            ("RknetTcpipInput" function
               (:arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3036 3047])
                    ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3048 3062]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [3014 3346])
            ("RknetTcpipSendApiMsg" function
               (:arguments 
                  ( ("apiMsg" variable
                       (:pointer 1
                        :type ("TcpipApiMsg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3375 3395]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [3348 3869])
            ("RknetTpcipCallback" function
               (:arguments 
                  ( ("cb" variable (:type ("TcpIpCb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3896 3907])
                    ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [3908 3918]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [3871 4264])
            ("RknetTcpipInit" function
               (:arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [4287 4297]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [4266 5354])
            ("RknetTcpipDeinit" function
               (:arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [5378 5388]))                  
                :type "void")
                nil [5356 6111]))          
      :file "tcpip.c"
      :pointmax 6112
      :fsize 7383
      :lastmodtime '(22665 59165 499693 428000)
      :unmatched-syntax '((punctuation 2014 . 2015) (number 2013 . 2014) (RETURN 2006 . 2012) (punctuation 2003 . 2004) (symbol 1998 . 2003) (punctuation 1996 . 1997) (symbol 1983 . 1995) (close-paren 1979 . 1980) (semantic-list 1015 . 1977) (semantic-list 1003 . 1014) (SWITCH 996 . 1002) (semantic-list 974 . 992) (semantic-list 960 . 973) (IF 957 . 959) (punctuation 952 . 953) (semantic-list 922 . 952) (symbol 903 . 922) (open-paren 899 . 900) (close-paren 897 . 898) (symbol 885 . 897) (punctuation 884 . 885) (open-paren 883 . 884) (WHILE 877 . 882) (punctuation 873 . 874) (close-paren 872 . 873) (symbol 862 . 872) (open-paren 861 . 862) (symbol 851 . 861) (punctuation 781 . 782) (symbol 778 . 781) (close-paren 777 . 778) (punctuation 776 . 777) (symbol 769 . 776) (open-paren 768 . 769) (punctuation 766 . 767) (symbol 755 . 765) (punctuation 738 . 739) (symbol 731 . 738) (punctuation 2014 . 2015) (number 2013 . 2014) (RETURN 2006 . 2012) (punctuation 2003 . 2004) (symbol 1998 . 2003) (punctuation 1996 . 1997) (symbol 1983 . 1995) (semantic-list 899 . 1980) (semantic-list 883 . 898) (WHILE 877 . 882) (punctuation 873 . 874) (semantic-list 861 . 873) (symbol 851 . 861) (punctuation 2014 . 2015) (number 2013 . 2014) (RETURN 2006 . 2012) (punctuation 2003 . 2004) (symbol 1998 . 2003) (punctuation 1996 . 1997) (symbol 1983 . 1995) (close-paren 1979 . 1980) (close-paren 1976 . 1977) (punctuation 1972 . 1973) (BREAK 1967 . 1972) (punctuation 1962 . 1963) (DEFAULT 1955 . 1962) (punctuation 1951 . 1952) (BREAK 1946 . 1951) (punctuation 1940 . 1941) (close-paren 1939 . 1940) (symbol 1936 . 1939) (open-paren 1935 . 1936) (symbol 1922 . 1935) (punctuation 1916 . 1917) (symbol 1912 . 1916) (punctuation 1910 . 1911) (symbol 1897 . 1909) (punctuation 1891 . 1892) (symbol 1877 . 1891) (CASE 1872 . 1876) (punctuation 1816 . 1817) (BREAK 1811 . 1816) (punctuation 1805 . 1806) (close-paren 1804 . 1805) (symbol 1801 . 1804) (open-paren 1800 . 1801) (symbol 1787 . 1800) (punctuation 1781 . 1782) (close-paren 1780 . 1781) (symbol 1776 . 1780) (punctuation 1775 . 1776) (symbol 1767 . 1775) (punctuation 1766 . 1767) (punctuation 1765 . 1766) (symbol 1762 . 1765) (open-paren 1761 . 1762) (close-paren 1760 . 1761) (close-paren 1759 . 1760) (symbol 1757 . 1759) (punctuation 1756 . 1757) (symbol 1748 . 1756) (punctuation 1747 . 1748) (punctuation 1746 . 1747) (symbol 1743 . 1746) (open-paren 1742 . 1743) (close-paren 1741 . 1742) (symbol 1734 . 1741) (open-paren 1733 . 1734) (open-paren 1732 . 1733) (punctuation 1726 . 1727) (symbol 1718 . 1726) (CASE 1713 . 1717) (punctuation 1707 . 1708) (BREAK 1702 . 1707) (punctuation 1589 . 1590) (close-paren 1588 . 1589) (symbol 1582 . 1588) (open-paren 1581 . 1582) (symbol 1574 . 1581) (punctuation 1573 . 1574) (punctuation 1572 . 1573) (symbol 1566 . 1572) (punctuation 1560 . 1561) (symbol 1554 . 1560) (punctuation 1553 . 1554) (symbol 1550 . 1553) (punctuation 1549 . 1550) (punctuation 1548 . 1549) (symbol 1545 . 1548) (punctuation 1543 . 1544) (symbol 1536 . 1542) (punctuation 1530 . 1531) (symbol 1517 . 1530) (CASE 1512 . 1516) (punctuation 1383 . 1384) (BREAK 1378 . 1383) (punctuation 1372 . 1373) (close-paren 1371 . 1372) (symbol 1368 . 1371) (open-paren 1367 . 1368) (symbol 1354 . 1367) (punctuation 1348 . 1349) (close-paren 1347 . 1348) (symbol 1341 . 1347) (punctuation 1340 . 1341) (symbol 1335 . 1340) (punctuation 1334 . 1335) (punctuation 1333 . 1334) (symbol 1330 . 1333) (close-paren 1329 . 1330) (punctuation 1328 . 1329) (symbol 1320 . 1328) (open-paren 1319 . 1320) (punctuation 1292 . 1293) (symbol 1288 . 1292) (punctuation 1287 . 1288) (symbol 1282 . 1287) (punctuation 1281 . 1282) (punctuation 1280 . 1281) (symbol 1277 . 1280) (close-paren 1276 . 1277) (punctuation 1275 . 1276) (symbol 1271 . 1275) (open-paren 1270 . 1271) (open-paren 1269 . 1270) (symbol 1256 . 1269) (close-paren 1255 . 1256) (VOID 1251 . 1255) (open-paren 1250 . 1251) (punctuation 1244 . 1245) (symbol 1226 . 1244) (CASE 1221 . 1225) (open-paren 1015 . 1016) (close-paren 1013 . 1014) (symbol 1009 . 1013) (punctuation 1008 . 1009) (punctuation 1007 . 1008) (symbol 1004 . 1007) (open-paren 1003 . 1004) (SWITCH 996 . 1002) (close-paren 991 . 992) (punctuation 987 . 988) (CONTINUE 979 . 987) (open-paren 974 . 975) (close-paren 972 . 973) (symbol 968 . 972) (punctuation 966 . 967) (punctuation 965 . 966) (symbol 961 . 964) (open-paren 960 . 961) (IF 957 . 959) (punctuation 952 . 953) (close-paren 951 . 952) (symbol 948 . 951) (punctuation 947 . 948) (close-paren 946 . 947) (punctuation 945 . 946) (punctuation 944 . 945) (VOID 940 . 944) (open-paren 939 . 940) (punctuation 937 . 938) (symbol 924 . 937) (punctuation 923 . 924) (open-paren 922 . 923) (symbol 903 . 922) (open-paren 899 . 900) (close-paren 897 . 898) (symbol 885 . 897) (punctuation 884 . 885) (open-paren 883 . 884) (WHILE 877 . 882) (punctuation 873 . 874) (close-paren 872 . 873) (symbol 862 . 872) (open-paren 861 . 862) (symbol 851 . 861) (punctuation 781 . 782) (symbol 778 . 781) (close-paren 777 . 778) (punctuation 776 . 777) (symbol 769 . 776) (open-paren 768 . 769) (punctuation 766 . 767) (symbol 755 . 765) (punctuation 738 . 739) (symbol 731 . 738) (punctuation 2872 . 2873) (symbol 2869 . 2872) (RETURN 2862 . 2868) (punctuation 2859 . 2860) (close-paren 2858 . 2859) (symbol 2845 . 2858) (punctuation 2844 . 2845) (open-paren 2843 . 2844) (symbol 2831 . 2843) (punctuation 2828 . 2829) (symbol 2815 . 2828) (punctuation 2813 . 2814) (close-paren 2812 . 2813) (symbol 2808 . 2812) (open-paren 2807 . 2808) (symbol 2795 . 2807) (punctuation 2792 . 2793) (symbol 2779 . 2792) (punctuation 2777 . 2778) (close-paren 2776 . 2777) (symbol 2772 . 2776) (open-paren 2771 . 2772) (symbol 2762 . 2771) (punctuation 2759 . 2760) (symbol 2747 . 2759) (punctuation 2745 . 2746) (close-paren 2744 . 2745) (symbol 2740 . 2744) (open-paren 2739 . 2740) (symbol 2730 . 2739) (punctuation 2727 . 2728) (symbol 2717 . 2727) (punctuation 2715 . 2716) (close-paren 2714 . 2715) (symbol 2710 . 2714) (open-paren 2709 . 2710) (symbol 2695 . 2709) (punctuation 2692 . 2693) (symbol 2677 . 2692) (punctuation 2618 . 2619) (number 2617 . 2618) (RETURN 2610 . 2616) (close-paren 2606 . 2607) (punctuation 2579 . 2580) (semantic-list 2564 . 2579) (symbol 2554 . 2564) (punctuation 2552 . 2553) (symbol 2548 . 2551) (open-paren 2544 . 2545) (close-paren 2542 . 2543) (semantic-list 2527 . 2542) (symbol 2517 . 2527) (open-paren 2516 . 2517) (IF 2513 . 2515) (punctuation 2510 . 2511) (close-paren 2509 . 2510) (symbol 2499 . 2509) (semantic-list 2492 . 2499) (punctuation 2490 . 2491) (symbol 2479 . 2490) (open-paren 2478 . 2479) (symbol 2464 . 2478) (punctuation 2462 . 2463) (symbol 2448 . 2461) (close-paren 2444 . 2445) (open-paren 2422 . 2423) (close-paren 2420 . 2421) (semantic-list 2415 . 2420) (symbol 2407 . 2415) (open-paren 2406 . 2407) (IF 2403 . 2405) (punctuation 2400 . 2401) (close-paren 2399 . 2400) (symbol 2395 . 2399) (open-paren 2394 . 2395) (symbol 2382 . 2394) (punctuation 2380 . 2381) (symbol 2376 . 2379) (close-paren 2372 . 2373) (open-paren 2348 . 2349) (close-paren 2346 . 2347) (semantic-list 2341 . 2346) (symbol 2333 . 2341) (open-paren 2332 . 2333) (IF 2329 . 2331) (punctuation 2326 . 2327) (close-paren 2325 . 2326) (symbol 2321 . 2325) (open-paren 2320 . 2321) (symbol 2313 . 2320) (punctuation 2311 . 2312) (symbol 2307 . 2310) (close-paren 2303 . 2304) (open-paren 2278 . 2279) (close-paren 2276 . 2277) (semantic-list 2271 . 2276) (symbol 2263 . 2271) (open-paren 2262 . 2263) (IF 2259 . 2261) (punctuation 2256 . 2257) (close-paren 2255 . 2256) (symbol 2251 . 2255) (open-paren 2250 . 2251) (symbol 2243 . 2250) (punctuation 2241 . 2242) (symbol 2237 . 2240) (close-paren 2233 . 2234) (open-paren 2208 . 2209) (close-paren 2206 . 2207) (semantic-list 2201 . 2206) (symbol 2193 . 2201) (open-paren 2192 . 2193) (IF 2189 . 2191) (punctuation 2186 . 2187) (close-paren 2185 . 2186) (symbol 2181 . 2185) (open-paren 2180 . 2181) (symbol 2170 . 2180) (punctuation 2168 . 2169) (symbol 2164 . 2167) (close-paren 2160 . 2161) (punctuation 2157 . 2158) (symbol 2154 . 2157) (RETURN 2147 . 2153) (open-paren 2143 . 2144) (close-paren 2141 . 2142) (semantic-list 2136 . 2141) (symbol 2128 . 2136) (open-paren 2127 . 2128) (IF 2124 . 2126) (punctuation 2121 . 2122) (close-paren 2120 . 2121) (symbol 2107 . 2120) (punctuation 2106 . 2107) (open-paren 2105 . 2106) (symbol 2095 . 2105) (punctuation 2093 . 2094) (symbol 2089 . 2092) (punctuation 2872 . 2873) (symbol 2869 . 2872) (RETURN 2862 . 2868) (punctuation 2859 . 2860) (semantic-list 2843 . 2859) (symbol 2831 . 2843) (punctuation 2828 . 2829) (symbol 2815 . 2828) (punctuation 2813 . 2814) (semantic-list 2807 . 2813) (symbol 2795 . 2807) (punctuation 2792 . 2793) (symbol 2779 . 2792) (punctuation 2777 . 2778) (semantic-list 2771 . 2777) (symbol 2762 . 2771) (punctuation 2759 . 2760) (symbol 2747 . 2759) (punctuation 2745 . 2746) (semantic-list 2739 . 2745) (symbol 2730 . 2739) (punctuation 2727 . 2728) (symbol 2717 . 2727) (punctuation 2715 . 2716) (semantic-list 2709 . 2715) (symbol 2695 . 2709) (punctuation 2692 . 2693) (symbol 2677 . 2692) (punctuation 2618 . 2619) (number 2617 . 2618) (RETURN 2610 . 2616) (semantic-list 2544 . 2607) (semantic-list 2516 . 2543) (IF 2513 . 2515) (punctuation 2510 . 2511) (semantic-list 2478 . 2510) (symbol 2464 . 2478) (punctuation 2462 . 2463) (symbol 2448 . 2461) (semantic-list 2422 . 2445) (semantic-list 2406 . 2421) (IF 2403 . 2405) (punctuation 2400 . 2401) (semantic-list 2394 . 2400) (symbol 2382 . 2394) (punctuation 2380 . 2381) (symbol 2376 . 2379) (semantic-list 2348 . 2373) (semantic-list 2332 . 2347) (IF 2329 . 2331) (punctuation 2326 . 2327) (semantic-list 2320 . 2326) (symbol 2313 . 2320) (punctuation 2311 . 2312) (symbol 2307 . 2310) (semantic-list 2278 . 2304) (semantic-list 2262 . 2277) (IF 2259 . 2261) (punctuation 2256 . 2257) (semantic-list 2250 . 2256) (symbol 2243 . 2250) (punctuation 2241 . 2242) (symbol 2237 . 2240) (semantic-list 2208 . 2234) (semantic-list 2192 . 2207) (IF 2189 . 2191) (punctuation 2186 . 2187) (semantic-list 2180 . 2186) (symbol 2170 . 2180) (punctuation 2168 . 2169) (symbol 2164 . 2167) (semantic-list 2143 . 2161) (semantic-list 2127 . 2142) (IF 2124 . 2126) (punctuation 2121 . 2122) (semantic-list 2105 . 2121) (symbol 2095 . 2105) (punctuation 2093 . 2094) (symbol 2089 . 2092) (punctuation 2872 . 2873) (symbol 2869 . 2872) (RETURN 2862 . 2868) (punctuation 2859 . 2860) (close-paren 2858 . 2859) (symbol 2845 . 2858) (punctuation 2844 . 2845) (open-paren 2843 . 2844) (symbol 2831 . 2843) (punctuation 2828 . 2829) (symbol 2815 . 2828) (punctuation 2813 . 2814) (close-paren 2812 . 2813) (symbol 2808 . 2812) (open-paren 2807 . 2808) (symbol 2795 . 2807) (punctuation 2792 . 2793) (symbol 2779 . 2792) (punctuation 2777 . 2778) (close-paren 2776 . 2777) (symbol 2772 . 2776) (open-paren 2771 . 2772) (symbol 2762 . 2771) (punctuation 2759 . 2760) (symbol 2747 . 2759) (punctuation 2745 . 2746) (close-paren 2744 . 2745) (symbol 2740 . 2744) (open-paren 2739 . 2740) (symbol 2730 . 2739) (punctuation 2727 . 2728) (symbol 2717 . 2727) (punctuation 2715 . 2716) (close-paren 2714 . 2715) (symbol 2710 . 2714) (open-paren 2709 . 2710) (symbol 2695 . 2709) (punctuation 2692 . 2693) (symbol 2677 . 2692) (punctuation 2618 . 2619) (number 2617 . 2618) (RETURN 2610 . 2616) (close-paren 2606 . 2607) (punctuation 2579 . 2580) (close-paren 2578 . 2579) (symbol 2565 . 2578) (open-paren 2564 . 2565) (symbol 2554 . 2564) (punctuation 2552 . 2553) (symbol 2548 . 2551) (open-paren 2544 . 2545) (close-paren 2542 . 2543) (close-paren 2541 . 2542) (symbol 2528 . 2541) (open-paren 2527 . 2528) (symbol 2517 . 2527) (open-paren 2516 . 2517) (IF 2513 . 2515) (punctuation 2510 . 2511) (close-paren 2509 . 2510) (symbol 2499 . 2509) (close-paren 2498 . 2499) (punctuation 2497 . 2498) (VOID 2493 . 2497) (open-paren 2492 . 2493) (punctuation 2490 . 2491) (symbol 2479 . 2490) (open-paren 2478 . 2479) (symbol 2464 . 2478) (punctuation 2462 . 2463) (symbol 2448 . 2461) (close-paren 2444 . 2445) (open-paren 2422 . 2423) (close-paren 2420 . 2421) (close-paren 2419 . 2420) (symbol 2416 . 2419) (open-paren 2415 . 2416) (symbol 2407 . 2415) (open-paren 2406 . 2407) (IF 2403 . 2405) (punctuation 2400 . 2401) (close-paren 2399 . 2400) (symbol 2395 . 2399) (open-paren 2394 . 2395) (symbol 2382 . 2394) (punctuation 2380 . 2381) (symbol 2376 . 2379) (close-paren 2372 . 2373) (open-paren 2348 . 2349) (close-paren 2346 . 2347) (close-paren 2345 . 2346) (symbol 2342 . 2345) (open-paren 2341 . 2342) (symbol 2333 . 2341) (open-paren 2332 . 2333) (IF 2329 . 2331) (punctuation 2326 . 2327) (close-paren 2325 . 2326) (symbol 2321 . 2325) (open-paren 2320 . 2321) (symbol 2313 . 2320) (punctuation 2311 . 2312) (symbol 2307 . 2310) (close-paren 2303 . 2304) (open-paren 2278 . 2279) (close-paren 2276 . 2277) (close-paren 2275 . 2276) (symbol 2272 . 2275) (open-paren 2271 . 2272) (symbol 2263 . 2271) (open-paren 2262 . 2263) (IF 2259 . 2261) (punctuation 2256 . 2257) (close-paren 2255 . 2256) (symbol 2251 . 2255) (open-paren 2250 . 2251) (symbol 2243 . 2250) (punctuation 2241 . 2242) (symbol 2237 . 2240) (close-paren 2233 . 2234) (open-paren 2208 . 2209) (close-paren 2206 . 2207) (close-paren 2205 . 2206) (symbol 2202 . 2205) (open-paren 2201 . 2202) (symbol 2193 . 2201) (open-paren 2192 . 2193) (IF 2189 . 2191) (punctuation 2186 . 2187) (close-paren 2185 . 2186) (symbol 2181 . 2185) (open-paren 2180 . 2181) (symbol 2170 . 2180) (punctuation 2168 . 2169) (symbol 2164 . 2167) (close-paren 2160 . 2161) (punctuation 2157 . 2158) (symbol 2154 . 2157) (RETURN 2147 . 2153) (open-paren 2143 . 2144) (close-paren 2141 . 2142) (close-paren 2140 . 2141) (symbol 2137 . 2140) (open-paren 2136 . 2137) (symbol 2128 . 2136) (open-paren 2127 . 2128) (IF 2124 . 2126) (punctuation 2121 . 2122) (close-paren 2120 . 2121) (symbol 2107 . 2120) (punctuation 2106 . 2107) (open-paren 2105 . 2106) (symbol 2095 . 2105) (punctuation 2093 . 2094) (symbol 2089 . 2092) (punctuation 2931 . 2932) (symbol 2923 . 2931) (RETURN 2916 . 2922) (punctuation 2931 . 2932) (symbol 2923 . 2931) (RETURN 2916 . 2922) (punctuation 3343 . 3344) (number 3342 . 3343) (RETURN 3335 . 3341) (punctuation 3332 . 3333) (semantic-list 3306 . 3332) (symbol 3289 . 3306) (punctuation 3285 . 3286) (symbol 3282 . 3285) (punctuation 3280 . 3281) (symbol 3273 . 3279) (punctuation 3272 . 3273) (symbol 3267 . 3272) (punctuation 3266 . 3267) (punctuation 3265 . 3266) (symbol 3257 . 3265) (punctuation 3254 . 3255) (symbol 3250 . 3254) (punctuation 3248 . 3249) (symbol 3243 . 3247) (punctuation 3242 . 3243) (symbol 3237 . 3242) (punctuation 3236 . 3237) (punctuation 3235 . 3236) (symbol 3227 . 3235) (punctuation 3224 . 3225) (symbol 3206 . 3224) (punctuation 3204 . 3205) (symbol 3199 . 3203) (punctuation 3198 . 3199) (punctuation 3197 . 3198) (symbol 3189 . 3197) (semantic-list 3163 . 3186) (semantic-list 3144 . 3162) (IF 3141 . 3143) (punctuation 3138 . 3139) (semantic-list 3119 . 3138) (symbol 3106 . 3119) (punctuation 3104 . 3105) (symbol 3095 . 3103) (punctuation 3343 . 3344) (number 3342 . 3343) (RETURN 3335 . 3341) (punctuation 3332 . 3333) (close-paren 3331 . 3332) (symbol 3323 . 3331) (punctuation 3321 . 3322) (symbol 3308 . 3321) (punctuation 3307 . 3308) (open-paren 3306 . 3307) (symbol 3289 . 3306) (punctuation 3285 . 3286) (symbol 3282 . 3285) (punctuation 3280 . 3281) (symbol 3273 . 3279) (punctuation 3272 . 3273) (symbol 3267 . 3272) (punctuation 3266 . 3267) (punctuation 3265 . 3266) (symbol 3257 . 3265) (punctuation 3254 . 3255) (symbol 3250 . 3254) (punctuation 3248 . 3249) (symbol 3243 . 3247) (punctuation 3242 . 3243) (symbol 3237 . 3242) (punctuation 3236 . 3237) (punctuation 3235 . 3236) (symbol 3227 . 3235) (punctuation 3224 . 3225) (symbol 3206 . 3224) (punctuation 3204 . 3205) (symbol 3199 . 3203) (punctuation 3198 . 3199) (punctuation 3197 . 3198) (symbol 3189 . 3197) (close-paren 3185 . 3186) (punctuation 3182 . 3183) (symbol 3175 . 3182) (punctuation 3174 . 3175) (RETURN 3167 . 3173) (open-paren 3163 . 3164) (close-paren 3161 . 3162) (symbol 3157 . 3161) (punctuation 3155 . 3156) (punctuation 3154 . 3155) (symbol 3145 . 3153) (open-paren 3144 . 3145) (IF 3141 . 3143) (punctuation 3138 . 3139) (close-paren 3137 . 3138) (close-paren 3136 . 3137) (symbol 3128 . 3136) (punctuation 3127 . 3128) (open-paren 3126 . 3127) (SIZEOF 3120 . 3126) (open-paren 3119 . 3120) (symbol 3106 . 3119) (punctuation 3104 . 3105) (symbol 3095 . 3103))
      :lexical-table 
        '(("RKNETLIB_TCPIP")
          ("RKNETLIB")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("__TCPIP_H__" variable (:constant-flag t) nil [108 119])
            ("rknet/ipaddr.h" include (:system-flag t) nil [121 146])
            ("rknet/rknetdev.h" include (:system-flag t) nil [147 174])
            ("rknet/tcpip/pbuf.h" include (:system-flag t) nil [176 205])
            ("rknet/tcpip/netbuf.h" include (:system-flag t) nil [206 237])
            ("rknet/tcpip/msgbox.h" include (:system-flag t) nil [238 269])
            ("rknet/tcpip/timer.h" include (:system-flag t) nil [270 300])
            ("rknet/tcpip/etharp.h" include (:system-flag t) nil [302 333])
            ("rknet/tcpip/ip4.h" include (:system-flag t) nil [334 362])
            ("rknet/tcpip/icmp.h" include (:system-flag t) nil [363 392])
            ("rknet/tcpip/udp.h" include (:system-flag t) nil [393 421])
            ("rknet/tcpip/tcp.h" include (:system-flag t) nil [422 450])
            ("rknet/tcpip/netconnection.h" include (:system-flag t) nil [452 490])
            ("rknet/tcpip/tcpip_api.h" include (:system-flag t) nil [491 525])
            ("rknet/tcpip/checksum.h" include (:system-flag t) nil [526 559])
            ("TcpIpCb" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [585 595]))                  
                :type "void")
                nil [569 596])
            ("RknetTcpipInput" function
               (:prototype-flag t
                :arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [620 631])
                    ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [632 646]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [598 647])
            ("RknetTcpipSendApiMsg" function
               (:prototype-flag t
                :arguments 
                  ( ("apiMsg" variable
                       (:pointer 1
                        :type ("TcpipApiMsg" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [675 695]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [648 696])
            ("RknetTpcipCallback" function
               (:prototype-flag t
                :arguments 
                  ( ("cb" variable (:type ("TcpIpCb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [722 733])
                    ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [734 744]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [697 745])
            ("RknetTcpipInit" function
               (:prototype-flag t
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [767 777]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [746 778])
            ("RknetTcpipDeinit" function
               (:prototype-flag t
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [801 811]))                  
                :type "void")
                nil [779 812])
            ("RknetTcpipGetLogger" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [844 849]))                  
                :type ("RtLogger" type (:type "class") nil nil))
                nil [814 850])
            ("TcpipLog" variable (:constant-flag t) nil [859 867]))          
      :file "tcpip.h"
      :pointmax 917
      :fsize 948
      :lastmodtime '(22652 44347 397441 98000)
      :unmatched-syntax '((TYPEDEF 561 . 568))
      :lexical-table 
        '(("__TCPIP_H__")
          ("TcpipLog" . ((symbol "RknetTcpipGetLogger" 868 . 887) (semantic-list "()" 887 . 889)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("__IP4_H__" variable (:constant-flag t) nil [113 122])
            ("IP_PROTO_ICMP" variable (:constant-flag t) nil [132 145])
            ("IP_PROTO_TCP" variable (:constant-flag t) nil [156 168])
            ("IP_PROTO_UDP" variable (:constant-flag t) nil [180 192])
            ("IP_HLEN" variable (:constant-flag t) nil [206 213])
            ("IP_DEFAULT_TTL" variable (:constant-flag t) nil [232 246])
            ("_IpHdr" type
               (:members 
                  ( ("ihl" variable
                       (:suffix ":4"
                        :type ("uint8" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [299 318])
                    ("version" variable
                       (:suffix ":4"
                        :type ("uint8" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [320 339])
                    ("tos" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [341 352])
                    ("totalLen" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [354 370])
                    ("id" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [372 382])
                    ("IP_RF" variable (:constant-flag t) (reparse-symbol classsubparts) [391 396])
                    ("IP_DF" variable (:constant-flag t) (reparse-symbol classsubparts) [449 454])
                    ("IP_MF" variable (:constant-flag t) (reparse-symbol classsubparts) [503 508])
                    ("IP_OFFMASK" variable (:constant-flag t) (reparse-symbol classsubparts) [558 568])
                    ("fragOff" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [612 627])
                    ("ttl" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [629 640])
                    ("protocol" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [642 658])
                    ("checksum" variable (:type ("uint16" type (:type "class") nil nil)) (reparse-symbol classsubparts) [660 676])
                    ("srcAddr" variable (:type ("IpAddr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [678 693])
                    ("dstAddr" variable (:type ("IpAddr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [695 710]))                  
                :type "struct")
                nil [274 719])
            ("IpHdr" type
               (:typedef ("_IpHdr" type (:type "struct") nil nil)
                :type "typedef")
                nil [274 719])
            ("IP_PCB" variable (:constant-flag t) nil [970 976])
            ("_IpPcb" type
               (:members 
                  ( ("localIp" variable (:type ("IpAddr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1521 1527])
                    ("remoteIp" variable (:type ("IpAddr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1521 1527])
                    ("sockOpt" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1521 1527])
                    ("tos" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1521 1527])
                    ("ttl" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1521 1527])
                    ("addrHint" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1521 1528]))                  
                :type "struct")
                nil [1496 1537])
            ("IpPcb" type
               (:typedef ("_IpPcb" type (:type "struct") nil nil)
                :type "typedef")
                nil [1496 1537])
            ("RK_SOF_DEBUG" variable (:constant-flag t) nil [1632 1644])
            ("RK_SOF_ACCEPTCONN" variable (:constant-flag t) nil [1694 1711])
            ("RK_SOF_REUSEADDR" variable (:constant-flag t) nil [1796 1812])
            ("RK_SOF_KEEPALIVE" variable (:constant-flag t) nil [1878 1894])
            ("RK_SOF_DONTROUTE" variable (:constant-flag t) nil [1965 1981])
            ("RK_SOF_BROADCAST" variable (:constant-flag t) nil [2063 2079])
            ("RK_SOF_USELOOPBACK" variable (:constant-flag t) nil [2121 2139])
            ("RK_SOF_LINGER" variable (:constant-flag t) nil [2296 2309])
            ("RK_SOF_OOBINLINE" variable (:constant-flag t) nil [2354 2370])
            ("RK_SOF_REUSEPORT" variable (:constant-flag t) nil [2412 2428])
            ("SOF_INHERITED" variable (:constant-flag t) nil [2447 2460])
            ("IpInput" function
               (:prototype-flag t
                :arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3034 3045])
                    ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3046 3060]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [3020 3061])
            ("IpRoute" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("dstAddr" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3366 3382]))                  
                :type ("RknetDev" type (:type "class") nil nil))
                nil [3348 3383])
            ("IpDevOutput" function
               (:prototype-flag t
                :arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4656 4671])
                    ("src" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4673 4687])
                    ("dst" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4689 4703])
                    ("ttl" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4705 4719])
                    ("tos" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4721 4735])
                    ("proto" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4737 4753])
                    ("dev" variable
                       (:pointer 1
                        :type ("RknetDev" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4755 4769]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [4636 4770])
            ("IpOutput" function
               (:prototype-flag t
                :arguments 
                  ( ("pbuf" variable
                       (:pointer 1
                        :type ("Pbuf" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5084 5097])
                    ("src" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5099 5111])
                    ("dst" variable
                       (:pointer 1
                        :type ("IpAddr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5113 5125])
                    ("ttl" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5127 5139])
                    ("tos" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5141 5153])
                    ("proto" variable (:type ("uint8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5155 5169]))                  
                :type ("int32" type (:type "class") nil nil))
                nil [5067 5170]))          
      :file "ip4.h"
      :pointmax 5196
      :fsize 6742
      :lastmodtime '(22652 44347 397441 98000)
      :unmatched-syntax '((semantic-list 732 . 737) (symbol 728 . 732) (symbol 721 . 727) (punctuation 720 . 721) (semantic-list 264 . 273) (symbol 260 . 264) (number 271 . 272) (symbol 253 . 259) (number 271 . 272) (punctuation 252 . 253))
      :lexical-table 
        '(("IP_HLEN" . ((number "20" 221 . 223)))
          ("RK_SOF_DEBUG" . ((number "0x0001" 1651 . 1657)))
          ("RK_SOF_KEEPALIVE" . ((number "0x0008" 1897 . 1903)))
          ("__IP4_H__")
          ("IP_PROTO_ICMP" . ((number "1" 146 . 147)))
          ("IP_PROTO_UDP" . ((number "17" 194 . 196)))
          ("RK_SOF_BROADCAST" . ((number "0x0020" 2082 . 2088)))
          ("IP_RF" . ((symbol "0x8000U" 397 . 404)))
          ("IP_PROTO_TCP" . ((number "6" 170 . 171)))
          ("RK_SOF_OOBINLINE" . ((number "0x0100" 2373 . 2379)))
          ("IP_PCB" . 
              ((symbol "IpAddr" 1039 . 1045) (symbol "localIp" 1046 . 1053) (punctuation ";" 1053 . 1054) (symbol "IpAddr" 1112 . 1118) (symbol "remoteIp" 1119 . 1127) (punctuation ";" 1127 . 1128) (symbol "uint8" 1185 . 1190) (symbol "sockOpt" 1192 . 1199) (punctuation ";" 1199 . 1200) (symbol "uint8" 1258 . 1263) (symbol "tos" 1265 . 1268) (punctuation ";" 1268 . 1269) (symbol "uint8" 1331 . 1336) (symbol "ttl" 1338 . 1341) (punctuation ";" 1341 . 1342) (symbol "uint8" 1404 . 1409) (symbol "addrHint" 1411 . 1419)))
          ("SOF_INHERITED" . ((semantic-list "(RK_SOF_REUSEADDR|RK_SOF_KEEPALIVE|RK_SOF_LINGER)" 2463 . 2512)))
          ("IP_DEFAULT_TTL" . ((number "255" 247 . 250)))
          ("RK_SOF_ACCEPTCONN" . ((number "0x0002" 1713 . 1719)))
          ("IP_OFFMASK" . ((symbol "0x1fffU" 569 . 576)))
          ("RK_SOF_LINGER" . ((number "0x0080" 2315 . 2321)))
          ("RK_SOF_REUSEADDR" . ((number "0x0004" 1815 . 1821)))
          ("RK_SOF_USELOOPBACK" . ((number "0x0040" 2140 . 2146)))
          ("RK_SOF_REUSEPORT" . ((number "0x0200" 2431 . 2437)))
          ("IP_DF" . ((symbol "0x4000U" 455 . 462)))
          ("RK_SOF_DONTROUTE" . ((number "0x0010" 1984 . 1990)))
          ("IP_MF" . ((symbol "0x2000U" 509 . 516)))
          )
))
  :file "!home!qadabr!work!agent!src!core!rknet!tcpip!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
